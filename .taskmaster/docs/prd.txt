# Tag/Category 분리 기능 개발 PRD

## 프로젝트 개요
현재 단일 태그 시스템을 카테고리와 태그로 분리하여 더 체계적인 콘텐츠 분류 및 탐색 경험을 제공합니다.

## 문제 정의
1. **태그 증가로 인한 UI 복잡도**: 35개 포스트에서 이미 태그 스크롤 방식의 한계 체감
2. **구조적 분류 체계 부재**: 모든 분류가 평면적인 태그로만 관리됨
3. **탐색 경험의 제약**: 큰 주제별 빠른 접근과 세부 태그 탐색이 혼재

## 솔루션 개요
### 카테고리 시스템
- **고정 4개 카테고리**: 일상, 개발, 생각, 리뷰
- **메인 탐색 역할**: `/posts` 페이지에서 1차 필터링
- **URL 구조**: `/posts/[category]` 형태

### 태그 시스템
- **전용 페이지 제공**: `/tags` 페이지에 태그 클라우드
- **개수순 정렬**: 활용도 높은 태그 우선 노출
- **독립적 필터링**: 카테고리와 별개로 태그별 포스트 탐색

## 기술 요구사항

### 1. 데이터 구조 개선
- PostMetadata 타입에 category 필드 추가
- Category enum 정의 (일상, 개발, 생각, 리뷰)
- 기존 35개 포스트 frontmatter 마이그레이션

### 2. 라우팅 구조
- `/posts/[category]` - 카테고리별 포스트 목록
- `/tags` - 전체 태그 클라우드 페이지  
- `/tags/[tag]` - 개별 태그 포스트 목록

### 3. UI 컴포넌트
- CategoryFilter: 4개 고정 카테고리 버튼
- TagCloud: 개수순 정렬된 태그 클라우드
- 현재 TagList 컴포넌트 개선

### 4. 기능 요구사항
- 카테고리별 포스트 필터링
- 태그별 포스트 필터링 (카테고리와 독립적)
- SEO 최적화된 URL 구조
- 반응형 디자인

## 성공 지표
1. **사용성**: 카테고리로 빠른 1차 분류 가능
2. **확장성**: 태그 증가에도 UI 복잡도 일정 유지
3. **성능**: 클라이언트 사이드 필터링 최적화
4. **SEO**: 구조화된 URL로 검색 최적화

## 개발 단계
1. 새 feature 브랜치 생성
2. 데이터 구조 및 타입 정의
3. 기존 포스트 카테고리 분류
4. 카테고리 필터링 구현
5. 태그 전용 페이지 개발
6. UI/UX 개선 및 테스트
7. 문서화 및 PR 생성

## 제약사항
- 기존 URL 구조와의 호환성 유지
- 빌드 및 린트 통과 필수
- 반응형 디자인 지원
- 클라이언트 사이드 렌더링 최적화
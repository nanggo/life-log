# 블로그 성능 최적화 PRD

## 목표
SvelteKit 블로그의 성능을 개선하여 사용자 경험을 향상시키고, 특히 모바일 환경에서의 체감 성능을 개선한다.

## 현재 문제점
1. 대용량 포스트(solid-principles)가 100KB의 거대한 JS 청크 생성
2. 각 포스트가 개별 JS 청크로 분리되어 초기 로드 부담
3. GitHub Issue 이미지가 원본 그대로 제공되어 성능 저하
4. CSS 번들 크기가 40KB로 최적화 필요
5. 모바일 환경에서 초기 로딩 속도 개선 필요

## 성능 목표
- 초기 로드 시간 30-40% 감소
- 번들 크기 25-30% 감소
- LCP(Largest Contentful Paint) 1.5초 이하
- FID(First Input Delay) 50ms 이하
- CLS(Cumulative Layout Shift) 0.05 이하

## 개선 작업

### 1. 대용량 포스트 최적화
- solid-principles 같은 대용량 포스트를 동적 임포트로 변경
- 포스트 콘텐츠를 청크로 분할하여 점진적 로딩 구현
- 스크롤 기반 콘텐츠 로딩으로 초기 번들 크기 감소

### 2. GitHub 이미지 최적화 시스템 구축
- Vercel Image Optimization API를 활용한 이미지 프록시 엔드포인트 개발
- On-the-fly 리사이징 및 포맷 변환 (WebP, AVIF)
- 이미지 캐싱 전략 구현
- srcset을 활용한 반응형 이미지 제공

### 3. 번들 최적화
- Vite 빌드 설정 개선으로 청크 크기 최적화
- Tree shaking 강화 및 미사용 코드 제거
- 동적 임포트를 활용한 코드 스플리팅 개선
- Vendor 청크 최적화

### 4. CSS 최적화
- Critical CSS 인라인화로 렌더링 차단 제거
- Tailwind CSS purge 설정 강화
- 미사용 스타일 제거
- CSS 모듈화 및 컴포넌트별 분리

### 5. 리소스 로딩 최적화
- Resource hints (prefetch, preconnect, dns-prefetch) 추가
- 폰트 로딩 최적화 (font-display: swap)
- 서드파티 스크립트 지연 로딩
- 이미지 지연 로딩 개선

### 6. 캐싱 전략 강화
- Service Worker 구현으로 오프라인 지원
- 정적 리소스 캐싱 정책 개선
- API 응답 캐싱 구현
- 브라우저 캐시 활용 극대화

### 7. 렌더링 최적화
- 가상 스크롤링 구현 (포스트 목록)
- 스켈레톤 UI 구현으로 체감 성능 개선
- 애니메이션 최적화 (will-change, transform)
- 레이아웃 시프트 방지

### 8. 모바일 성능 특화
- 터치 이벤트 최적화
- 모바일 전용 이미지 사이즈 제공
- 불필요한 폴리필 제거
- 모바일 전용 번들 생성

### 9. 빌드 프로세스 최적화
- 빌드 타임 메타데이터 캐싱 구현
- 정적 생성 최적화
- 병렬 빌드 프로세스 구현
- 빌드 캐시 활용

### 10. 모니터링 및 측정
- Web Vitals 모니터링 구현
- 실시간 성능 지표 추적
- Lighthouse CI 자동화
- 성능 리그레션 방지

## 구현 우선순위
1. 긴급: 대용량 포스트 최적화, GitHub 이미지 최적화
2. 높음: 번들 최적화, CSS 최적화
3. 중간: 리소스 로딩 최적화, 캐싱 전략
4. 낮음: 렌더링 최적화, 모바일 특화, 모니터링

## 작업 방식
- 각 작업별로 독립적인 브랜치 생성
- 기능별 PR을 통한 점진적 배포
- 병렬 작업 가능한 항목은 동시 진행
- 각 PR마다 성능 측정 및 검증

## 성공 지표
- Lighthouse 성능 점수 90점 이상
- 초기 로드 시간 2초 이내
- 모바일 체감 성능 개선
- 번들 크기 30% 감소
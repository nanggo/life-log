{
  "meta": {
    "generatedAt": "2025-08-06T03:18:15.563Z",
    "tasksAnalyzed": 10,
    "totalTasks": 10,
    "analysisCount": 10,
    "thresholdScore": 5,
    "projectName": "Taskmaster",
    "usedResearch": true
  },
  "complexityAnalysis": [
    {
      "taskId": 1,
      "taskTitle": "대용량 포스트 최적화 및 동적 로딩 구현",
      "complexityScore": 8,
      "recommendedSubtasks": 8,
      "expansionPrompt": "SvelteKit 환경에서 대용량 마크다운 포스트를 동적 임포트로 변환하고, Intersection Observer를 활용한 점진적 로딩 시스템을 구현하세요. MDSvex 플러그인 개발, Vite 청크 설정, 스크롤 기반 로딩, 성능 측정 도구 통합을 포함해야 합니다.",
      "reasoning": "대용량 포스트의 동적 로딩은 여러 레이어의 복잡한 작업입니다. MDSvex 커스텀 플러그인 개발, Vite 빌드 설정, Intersection Observer 구현, 청크 분할 전략, 로딩 상태 관리, 성능 측정 등 다양한 기술적 과제가 포함되어 있습니다."
    },
    {
      "taskId": 2,
      "taskTitle": "GitHub 이미지 최적화 시스템 구축",
      "complexityScore": 9,
      "recommendedSubtasks": 10,
      "expansionPrompt": "SvelteKit에서 이미지 최적화 API 엔드포인트를 구축하고, sharp를 활용한 이미지 변환 시스템을 구현하세요. GitHub 이미지 프록시, WebP/AVIF 변환, 반응형 이미지 생성, MDSvex 플러그인 개발, 캐싱 전략, 로깅 시스템을 포함해야 합니다.",
      "reasoning": "이미지 최적화 시스템은 백엔드 API 개발, 이미지 처리 라이브러리 통합, MDSvex 플러그인 개발, 다양한 이미지 포맷 지원, 반응형 이미지 생성, 캐싱 전략 등 매우 복잡한 기능들을 포함합니다. 특히 sharp 라이브러리의 서버사이드 통합과 성능 최적화가 도전적입니다."
    },
    {
      "taskId": 3,
      "taskTitle": "Vite 번들 최적화 및 코드 스플리팅 개선",
      "complexityScore": 7,
      "recommendedSubtasks": 7,
      "expansionPrompt": "Vite 빌드 설정을 최적화하여 번들 크기를 줄이고 코드 스플리팅을 개선하세요. manualChunks 전략, terser 최적화, tree shaking 강화, 번들 분석 도구 통합, SvelteKit prerender 최적화를 구현해야 합니다.",
      "reasoning": "Vite 빌드 최적화는 롤업 설정, 청크 분할 전략, 압축 옵션, tree shaking 설정 등 다양한 빌드 도구 지식이 필요합니다. 특히 SvelteKit과의 통합과 번들 크기 분석은 체계적인 접근이 필요합니다."
    },
    {
      "taskId": 4,
      "taskTitle": "Critical CSS 인라인화 및 Tailwind 최적화",
      "complexityScore": 6,
      "recommendedSubtasks": 6,
      "expansionPrompt": "Critical CSS를 추출하여 인라인화하고 Tailwind CSS를 최적화하세요. critical/critters 플러그인 통합, Tailwind purge 설정, PostCSS 파이프라인 구성, CSS 모듈화를 구현해야 합니다.",
      "reasoning": "Critical CSS 추출과 Tailwind 최적화는 빌드 프로세스 통합, CSS 처리 파이프라인 구성, 동적 클래스 보호 등의 작업이 필요합니다. SvelteKit의 SSR 환경에서 critical CSS 추출은 추가적인 복잡성을 가집니다."
    },
    {
      "taskId": 5,
      "taskTitle": "리소스 로딩 최적화 및 Resource Hints 구현",
      "complexityScore": 5,
      "recommendedSubtasks": 5,
      "expansionPrompt": "Resource hints를 추가하고 리소스 로딩을 최적화하세요. preconnect/dns-prefetch 설정, 폰트 로딩 최적화, 서드파티 스크립트 지연 로딩, 이미지 lazy loading, prefetch 전략을 구현해야 합니다.",
      "reasoning": "리소스 로딩 최적화는 상대적으로 직관적이지만, 다양한 최적화 기법을 올바르게 적용하고 SvelteKit의 prefetch 기능과 통합하는 작업이 필요합니다."
    },
    {
      "taskId": 6,
      "taskTitle": "Service Worker 기반 캐싱 전략 구현",
      "complexityScore": 7,
      "recommendedSubtasks": 8,
      "expansionPrompt": "Workbox를 사용하여 Service Worker 기반 캐싱 전략을 구현하세요. 정적 리소스 프리캐싱, 이미지/API 캐싱 전략, 오프라인 지원, PWA 매니페스트, Background Sync, 캐시 크기 관리를 포함해야 합니다.",
      "reasoning": "Service Worker 구현은 다양한 캐싱 전략, 오프라인 지원, Background Sync 등 PWA의 핵심 기능들을 포함합니다. Workbox와 vite-plugin-pwa의 통합, 캐시 관리 전략 수립이 복잡합니다."
    },
    {
      "taskId": 7,
      "taskTitle": "가상 스크롤링 및 스켈레톤 UI 구현",
      "complexityScore": 6,
      "recommendedSubtasks": 6,
      "expansionPrompt": "포스트 목록에 가상 스크롤링과 스켈레톤 UI를 구현하세요. 가상 스크롤 컴포넌트, 무한 스크롤, 스켈레톤 UI 디자인, 레이아웃 시프트 방지, 반응형 아이템 크기 조정을 포함해야 합니다.",
      "reasoning": "가상 스크롤링은 성능 최적화와 UX 개선을 동시에 다루는 작업입니다. Intersection Observer 활용, 동적 크기 계산, 스켈레톤 UI 구현 등이 필요하며, Svelte의 반응성과 잘 통합되어야 합니다."
    },
    {
      "taskId": 8,
      "taskTitle": "모바일 성능 특화 최적화",
      "complexityScore": 6,
      "recommendedSubtasks": 7,
      "expansionPrompt": "모바일 기기를 위한 성능 최적화를 구현하세요. 터치 이벤트 최적화, 모바일 전용 이미지 크기, 모던 브라우저 번들, hover 상태 최적화, 애니메이션 제어, 이미지 placeholder를 포함해야 합니다.",
      "reasoning": "모바일 최적화는 터치 이벤트, 반응형 이미지, CSS 미디어 쿼리, 번들 최적화 등 다양한 측면을 다룹니다. 특히 두 개의 의존성 작업과 연계되어 구현해야 합니다."
    },
    {
      "taskId": 9,
      "taskTitle": "빌드 타임 메타데이터 캐싱 시스템 구현",
      "complexityScore": 6,
      "recommendedSubtasks": 6,
      "expansionPrompt": "빌드 프로세스를 최적화하는 메타데이터 캐싱 시스템을 구현하세요. JSON 캐싱, 병렬 빌드 처리, 증분 빌드 시스템, Git hooks 통합, 빌드 캐시 관리를 포함해야 합니다.",
      "reasoning": "빌드 최적화는 Node.js의 worker_threads, Git hooks 통합, 증분 빌드 로직 등 빌드 도구에 대한 깊은 이해가 필요합니다. 두 개의 의존성과 연계되어야 합니다."
    },
    {
      "taskId": 10,
      "taskTitle": "Web Vitals 모니터링 및 성능 측정 시스템 구축",
      "complexityScore": 7,
      "recommendedSubtasks": 8,
      "expansionPrompt": "Web Vitals 모니터링과 Lighthouse CI 자동화 시스템을 구축하세요. web-vitals 통합, Vercel Analytics 연동, Lighthouse CI 설정, GitHub Actions 워크플로우, 성능 기준치 설정, 데이터 수집 및 시각화를 구현해야 합니다.",
      "reasoning": "성능 모니터링 시스템은 클라이언트 측 측정, CI/CD 통합, 데이터 수집 및 분석 등 여러 시스템을 연결하는 작업입니다. 네 개의 의존성과 GitHub Actions 설정이 복잡성을 더합니다."
    }
  ]
}

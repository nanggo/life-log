{
  "master": {
    "tasks": [
      {
        "id": 12,
        "title": "카테고리 필터링 로직 구현",
        "description": "포스트를 카테고리별로 필터링하는 유틸리티 함수 구현",
        "details": "src/lib/utils/posts.js에 getPostsByCategory(category: Category) 함수 추가. 기존 getPosts() 함수를 확장하여 카테고리 필터 매개변수 지원. 클라이언트 사이드 필터링 최적화를 위해 카테고리별 포스트 개수를 반환하는 getCategoryCounts() 함수 구현. 메모이제이션을 활용해 성능 최적화.",
        "testStrategy": "각 카테고리별 포스트 반환 정확성 테스트, 빈 카테고리 처리 확인, 성능 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "카테고리별 라우팅 구현",
        "description": "/posts/[category] 라우트 생성 및 동적 페이지 구현",
        "details": "src/routes/posts/[category]/+page.svelte와 +page.server.ts 생성. params.category를 검증하여 유효한 Category enum 값인지 확인. getPostsByCategory() 함수를 사용해 해당 카테고리 포스트 로드. 페이지네이션 지원을 위해 기존 pagination 로직 재사용. SEO를 위한 메타 태그 설정 (제목: '{카테고리} 포스트', 설명 포함).",
        "testStrategy": "각 카테고리 URL 접근 테스트, 유효하지 않은 카테고리 처리 확인, 페이지네이션 동작 검증",
        "priority": "medium",
        "dependencies": [12],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "CategoryFilter 컴포넌트 구현",
        "description": "4개 고정 카테고리 버튼을 제공하는 필터 컴포넌트 개발",
        "details": "src/lib/components/CategoryFilter.svelte 생성. 4개 카테고리 버튼을 Tailwind CSS로 스타일링 (현재 활성 카테고리 하이라이트 포함). 클릭 시 해당 카테고리 페이지로 내비게이션. 반응형 디자인으로 모바일에서는 2x2 그리드, 데스크톱에서는 4개 버튼 일렬 배치. 각 카테고리별 포스트 개수 표시.",
        "testStrategy": "모든 카테고리 버튼 클릭 동작 확인, 반응형 레이아웃 테스트, 접근성 검증",
        "priority": "medium",
        "dependencies": [13],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "태그 전용 페이지 구현",
        "description": "/tags 페이지에 태그 클라우드 구현",
        "details": "src/routes/tags/+page.svelte와 +page.server.ts 생성. 모든 태그와 각 태그별 포스트 개수를 수집하는 getAllTagsWithCounts() 함수 구현. 태그를 포스트 개수 순으로 정렬하여 표시. TagCloud 컴포넌트에서 글꼴 크기를 포스트 개수에 비례하여 조정 (1-3개: text-sm, 4-6개: text-base, 7개 이상: text-lg). Tailwind CSS로 태그 클라우드 스타일링.",
        "testStrategy": "태그 개수 정확성 확인, 정렬 순서 검증, 태그 클라우드 시각적 표현 테스트",
        "priority": "medium",
        "dependencies": [12],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "개별 태그 라우팅 구현",
        "description": "/tags/[tag] 라우트로 태그별 포스트 목록 페이지 구현",
        "details": "src/routes/tags/[tag]/+page.svelte와 +page.server.ts 생성. URL의 태그 파라미터를 디코딩하여 해당 태그를 포함한 포스트 필터링. 기존 getPostsByTag() 함수 활용 또는 새로 구현. 카테고리와 독립적으로 모든 카테고리의 포스트에서 해당 태그 검색. SEO 최적화를 위한 동적 메타 태그 설정. 페이지네이션 지원.",
        "testStrategy": "다양한 태그로 URL 접근 테스트, 한글 태그 URL 인코딩/디코딩 확인, 존재하지 않는 태그 처리 검증",
        "priority": "medium",
        "dependencies": [15],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "UI/UX 통합 및 최적화",
        "description": "전체 UI 통합, 성능 최적화 및 접근성 개선",
        "details": "메인 /posts 페이지에 CategoryFilter 컴포넌트 통합. 기존 TagList 컴포넌트를 개선하여 태그 페이지 링크 추가. 브레드크럼 내비게이션 구현 (/posts > /posts/[category] > 개별 포스트). 클라이언트 사이드 필터링 성능 최적화를 위한 가상 스크롤링 고려. 접근성을 위한 ARIA 레이블 추가. 모바일 최적화 및 터치 인터랙션 개선.",
        "testStrategy": "전체 사용자 플로우 테스트, 성능 메트릭 측정, 접근성 도구로 검증, 다양한 디바이스에서 반응형 테스트",
        "priority": "medium",
        "dependencies": [14, 16],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-22T05:48:25.873Z",
      "updated": "2025-07-31T02:25:56.861Z",
      "description": "Tasks for master context"
    }
  }
}

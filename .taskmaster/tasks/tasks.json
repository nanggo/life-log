{
  "master": {
    "tasks": [
      {
        "id": 12,
        "title": "카테고리 필터링 로직 구현",
        "description": "포스트를 카테고리별로 필터링하는 유틸리티 함수 구현",
        "details": "src/lib/utils/posts.js에 getPostsByCategory(category: Category) 함수 추가. 기존 getPosts() 함수를 확장하여 카테고리 필터 매개변수 지원. 클라이언트 사이드 필터링 최적화를 위해 카테고리별 포스트 개수를 반환하는 getCategoryCounts() 함수 구현. 메모이제이션을 활용해 성능 최적화.",
        "testStrategy": "각 카테고리별 포스트 반환 정확성 테스트, 빈 카테고리 처리 확인, 성능 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "카테고리별 라우팅 구현",
        "description": "/posts/[category] 라우트 생성 및 동적 페이지 구현",
        "details": "src/routes/posts/[category]/+page.svelte와 +page.server.ts 생성. params.category를 검증하여 유효한 Category enum 값인지 확인. getPostsByCategory() 함수를 사용해 해당 카테고리 포스트 로드. 페이지네이션 지원을 위해 기존 pagination 로직 재사용. SEO를 위한 메타 태그 설정 (제목: '{카테고리} 포스트', 설명 포함).",
        "testStrategy": "각 카테고리 URL 접근 테스트, 유효하지 않은 카테고리 처리 확인, 페이지네이션 동작 검증",
        "priority": "medium",
        "dependencies": [12],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "CategoryFilter 컴포넌트 구현",
        "description": "4개 고정 카테고리 버튼을 제공하는 필터 컴포넌트 개발",
        "details": "src/lib/components/CategoryFilter.svelte 생성. 4개 카테고리 버튼을 Tailwind CSS로 스타일링 (현재 활성 카테고리 하이라이트 포함). 클릭 시 해당 카테고리 페이지로 내비게이션. 반응형 디자인으로 모바일에서는 2x2 그리드, 데스크톱에서는 4개 버튼 일렬 배치. 각 카테고리별 포스트 개수 표시.",
        "testStrategy": "모든 카테고리 버튼 클릭 동작 확인, 반응형 레이아웃 테스트, 접근성 검증",
        "priority": "medium",
        "dependencies": [13],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "태그 전용 페이지 구현",
        "description": "/tags 페이지에 태그 클라우드 구현",
        "details": "src/routes/tags/+page.svelte와 +page.server.ts 생성. 모든 태그와 각 태그별 포스트 개수를 수집하는 getAllTagsWithCounts() 함수 구현. 태그를 포스트 개수 순으로 정렬하여 표시. TagCloud 컴포넌트에서 글꼴 크기를 포스트 개수에 비례하여 조정 (1-3개: text-sm, 4-6개: text-base, 7개 이상: text-lg). Tailwind CSS로 태그 클라우드 스타일링.",
        "testStrategy": "태그 개수 정확성 확인, 정렬 순서 검증, 태그 클라우드 시각적 표현 테스트",
        "priority": "medium",
        "dependencies": [12],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "개별 태그 라우팅 구현",
        "description": "/tags/[tag] 라우트로 태그별 포스트 목록 페이지 구현",
        "details": "src/routes/tags/[tag]/+page.svelte와 +page.server.ts 생성. URL의 태그 파라미터를 디코딩하여 해당 태그를 포함한 포스트 필터링. 기존 getPostsByTag() 함수 활용 또는 새로 구현. 카테고리와 독립적으로 모든 카테고리의 포스트에서 해당 태그 검색. SEO 최적화를 위한 동적 메타 태그 설정. 페이지네이션 지원.",
        "testStrategy": "다양한 태그로 URL 접근 테스트, 한글 태그 URL 인코딩/디코딩 확인, 존재하지 않는 태그 처리 검증",
        "priority": "medium",
        "dependencies": [15],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "UI/UX 통합 및 최적화",
        "description": "전체 UI 통합, 성능 최적화 및 접근성 개선",
        "details": "메인 /posts 페이지에 CategoryFilter 컴포넌트 통합. 기존 TagList 컴포넌트를 개선하여 태그 페이지 링크 추가. 브레드크럼 내비게이션 구현 (/posts > /posts/[category] > 개별 포스트). 클라이언트 사이드 필터링 성능 최적화를 위한 가상 스크롤링 고려. 접근성을 위한 ARIA 레이블 추가. 모바일 최적화 및 터치 인터랙션 개선.",
        "testStrategy": "전체 사용자 플로우 테스트, 성능 메트릭 측정, 접근성 도구로 검증, 다양한 디바이스에서 반응형 테스트",
        "priority": "medium",
        "dependencies": [14, 16],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "메인 /posts 페이지에 CategoryFilter 컴포넌트 통합",
            "description": "기존 메인 포스트 페이지에 CategoryFilter 컴포넌트를 통합하여 카테고리별 필터링 기능 제공",
            "dependencies": [],
            "details": "src/routes/posts/+page.svelte에 CategoryFilter 컴포넌트 임포트 및 추가. 현재 활성 카테고리 상태 관리 구현. 컴포넌트 위치는 페이지 상단, 포스트 목록 위에 배치. 모바일과 데스크톱 모두에서 적절한 간격과 레이아웃 적용.",
            "status": "done",
            "testStrategy": "메인 페이지에서 CategoryFilter 표시 확인, 카테고리 버튼 클릭 시 올바른 페이지 이동, 반응형 레이아웃 테스트"
          },
          {
            "id": 2,
            "title": "TagList 컴포넌트 개선 및 태그 페이지 링크 추가",
            "description": "기존 TagList 컴포넌트를 개선하여 태그 클릭 시 해당 태그 페이지로 이동하는 링크 기능 추가",
            "dependencies": [],
            "details": "src/lib/components/TagList.svelte 수정하여 각 태그를 클릭 가능한 링크로 변경. 태그 클릭 시 /tags/[tag] 페이지로 이동. 한글 태그의 경우 적절한 URL 인코딩 적용. 태그 호버 효과와 활성 상태 스타일링 추가. 접근성을 위한 적절한 aria-label 추가.\n<info added on 2025-08-03T16:30:00.869Z>\n코드 분석 완료 - 모든 요구사항이 이미 구현되어 있음을 확인했습니다. clickable 속성과 getTagUrl 함수를 통한 /tags/[encoded-tag] URL 생성, encodeURIComponent를 사용한 한글 태그 URL 인코딩, CSS 전환 효과와 호버 상태, selectedTag prop과 aria-current를 통한 활성 상태 및 접근성, 휠 이벤트 처리가 포함된 모바일 최적화가 모두 구현되어 있습니다. 개별 포스트 페이지와 태그 페이지에서 모두 사용되고 있으며 추가 수정이 필요하지 않습니다.\n</info added on 2025-08-03T16:30:00.869Z>",
            "status": "done",
            "testStrategy": "태그 클릭 시 올바른 페이지 이동 확인, 한글 태그 URL 인코딩 검증, 호버 및 포커스 상태 테스트"
          },
          {
            "id": 3,
            "title": "브레드크럼 내비게이션 컴포넌트 구현",
            "description": "/posts > /posts/[category] > 개별 포스트 경로를 보여주는 브레드크럼 내비게이션 구현",
            "dependencies": ["17.1"],
            "details": "src/lib/components/Breadcrumb.svelte 새로 생성. 현재 페이지 경로를 분석하여 적절한 브레드크럼 표시. 각 단계별 링크 제공 (홈 > 포스트 > 카테고리 > 현재 페이지). Tailwind CSS로 시각적 구분자와 스타일링 적용. 모바일에서는 축약된 형태로 표시.\n<info added on 2025-08-03T16:33:20.401Z>\n구현 완료됨. 접근성 기능(aria-label, aria-current, 키보드 네비게이션용 포커스 스타일링) 포함. 카테고리 페이지, 태그 페이지, 개별 포스트 페이지에 성공적으로 통합. layout/index.ts에 컴포넌트 export 추가. 빌드 및 린트 검사 통과.\n</info added on 2025-08-03T16:33:20.401Z>",
            "status": "done",
            "testStrategy": "다양한 페이지에서 브레드크럼 경로 정확성 확인, 링크 동작 테스트, 모바일 반응형 확인"
          },
          {
            "id": 4,
            "title": "클라이언트 사이드 성능 최적화 및 가상 스크롤링 구현",
            "description": "포스트 목록 페이지의 성능 최적화를 위한 가상 스크롤링 및 지연 로딩 구현",
            "dependencies": ["17.1", "17.3"],
            "details": "대량의 포스트 목록 처리를 위한 가상 스크롤링 라이브러리 선택 및 구현. 포스트 카드 컴포넌트의 이미지 지연 로딩 적용. 스크롤 성능 최적화를 위한 디바운싱 및 스로틀링 구현. 메모리 사용량 최적화를 위한 컴포넌트 정리 로직 추가.\n<info added on 2025-08-03T16:36:53.183Z>\n클라이언트 사이드 성능 최적화 및 가상 스크롤링 구현이 성공적으로 완료되었습니다:\n\nVirtualList 컴포넌트 고도화 완료 - 60fps 스로틀링 및 디바운싱을 통한 스크롤 이벤트 최적화, 성능 모니터링 기반 적응형 버퍼 크기 조정, requestIdleCallback을 활용한 자동 메모리 정리, Intersection Observer를 통한 화면 밖 이미지 최적화 적용.\n\nLazyImage 컴포넌트 성능 개선 - rootMargin을 200px로 확대하여 더 빠른 로딩 구현, fetchPriority 최적화를 통한 캐시 성능 향상, 원본 URL 저장을 통한 메모리 관리 강화.\n\nPostsList 컴포넌트 최적화 - 가상 스크롤링 임계값을 20개에서 15개로 낮춰 더 빠른 활성화, 아이템 높이 및 컨테이너 크기 조정으로 표시 개선, post.slug 기반 키 반응성 최적화, 메모이제이션 키를 통한 효율적 재렌더링 구현.\n\n성능 유틸리티 라이브러리 구축 - debounce, throttle, memoize 함수, 레이아웃 스래싱 방지를 위한 batchDOMOperations, 패시브 리스너를 사용한 optimizedScrollHandler, 타이밍 측정용 PerformanceTimer, 지연 로딩용 createOptimizedIntersectionObserver 포함.\n\n빌드 검증 완료 - 모든 최적화가 오류 없이 컴파일되며, 가상 스크롤링이 더 빠르게 활성화되어 부드러운 성능을 제공하고, 전략적 정리 및 캐싱을 통한 메모리 사용량 최적화 달성.\n</info added on 2025-08-03T16:36:53.183Z>",
            "status": "done",
            "testStrategy": "대량 포스트 목록에서 스크롤 성능 측정, 메모리 사용량 모니터링, 다양한 디바이스에서 성능 확인"
          },
          {
            "id": 5,
            "title": "접근성 개선 및 모바일 최적화",
            "description": "ARIA 레이블 추가, 키보드 내비게이션 지원, 모바일 터치 인터랙션 개선",
            "dependencies": ["17.2", "17.3"],
            "details": "모든 인터랙티브 요소에 적절한 ARIA 레이블 및 역할 추가. 키보드만으로 전체 사이트 내비게이션 가능하도록 구현. 터치 디바이스에서 버튼 크기 최적화 (최소 44px). 포커스 인디케이터 개선 및 색상 대비 확인. 스크린 리더 호환성 테스트.\n<info added on 2025-08-03T16:40:24.977Z>\nWCAG 2.1 AA 준수 완료: CategoryFilter 최소 44px 높이, TagList 36px 터치 타겟 적용. 일관된 포커스 인디케이터 (teal 색상, ring-2) 및 키보드 내비게이션 지원. 메인 콘텐츠 바로가기 링크, 포괄적인 ARIA 레이블 (태그 버튼 컨텍스트, 브레드크럼 aria-current) 구현. 모바일 터치 성능 최적화 (touch-manipulation) 및 활성 상태 피드백 추가. accessibility.ts 유틸리티 라이브러리 생성으로 재사용 가능한 접근성 클래스 제공. 빌드 검증 완료, 브랜드 일관성 유지.\n</info added on 2025-08-03T16:40:24.977Z>",
            "status": "done",
            "testStrategy": "접근성 도구(axe, WAVE)로 검증, 키보드 전용 내비게이션 테스트, 스크린 리더 호환성 확인, 다양한 모바일 디바이스에서 터치 인터랙션 테스트"
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-22T05:48:25.873Z",
      "updated": "2025-08-03T16:41:37.194Z",
      "description": "Tasks for master context"
    }
  },
  "improvements": {
    "tasks": [
      {
        "id": 1,
        "title": "태그 페이지 통계 표시 오류 수정",
        "description": "/tags 페이지에서 통계(maxCount, minCount, avgCount, totalCount) 변수가 정의되지 않아 주석 처리된 문제를 해결",
        "details": "+page.server.ts에서 태그별 포스트 수를 계산하여 maxCount, minCount, avgCount, totalCount 통계를 생성하고 페이지에 전달. 기존 주석 처리된 통계 표시 코드를 복원하여 사용자에게 태그 사용 통계를 제공.",
        "testStrategy": "태그 페이지 접속 시 통계 정보가 정상적으로 표시되는지 확인. 다양한 태그 데이터로 통계 계산이 정확한지 검증.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "태그별 포스트 수 계산 로직 구현",
            "description": "모든 포스트에서 태그를 추출하고 각 태그별로 포스트 개수를 계산하는 함수를 구현",
            "dependencies": [],
            "details": "src/routes/tags/+page.server.ts에서 포스트 데이터를 읽어와 태그별 포스트 수를 계산하는 로직을 구현합니다. Map 또는 객체를 사용하여 태그명을 키로, 포스트 개수를 값으로 저장하는 데이터 구조를 생성합니다.",
            "status": "done",
            "testStrategy": "다양한 태그가 포함된 테스트 포스트 데이터로 태그별 개수가 정확히 계산되는지 확인"
          },
          {
            "id": 2,
            "title": "통계 값 계산 함수 구현",
            "description": "태그별 포스트 수 데이터를 기반으로 maxCount, minCount, avgCount, totalCount 통계를 계산",
            "dependencies": ["1.1"],
            "details": "태그별 포스트 수 데이터에서 최대값(maxCount), 최소값(minCount), 평균값(avgCount), 총 태그 수(totalCount)를 계산하는 함수를 구현합니다. Math.max, Math.min 등을 활용하여 통계를 계산하고 소수점 처리도 고려합니다.",
            "status": "done",
            "testStrategy": "다양한 태그 분포에서 통계 계산이 수학적으로 정확한지 검증"
          },
          {
            "id": 3,
            "title": "서버 로드 함수에서 통계 데이터 반환",
            "description": "+page.server.ts의 load 함수에서 계산된 통계 데이터를 페이지로 전달",
            "dependencies": ["1.2"],
            "details": "load 함수에서 태그 데이터와 함께 계산된 통계 값들을 반환하도록 수정합니다. 기존 태그 데이터 구조를 유지하면서 statistics 객체를 추가하여 maxCount, minCount, avgCount, totalCount를 포함시킵니다.",
            "status": "done",
            "testStrategy": "페이지 로드 시 통계 데이터가 올바르게 전달되는지 확인"
          },
          {
            "id": 4,
            "title": "페이지 컴포넌트에서 통계 데이터 타입 정의",
            "description": "PageData 타입에 통계 필드를 추가하고 타입 안전성 확보",
            "dependencies": ["1.3"],
            "details": "src/routes/tags/+page.svelte에서 사용할 PageData 타입을 확장하여 statistics 객체의 타입을 정의합니다. TypeScript의 타입 안전성을 보장하면서 통계 데이터에 접근할 수 있도록 인터페이스를 수정합니다.",
            "status": "done",
            "testStrategy": "TypeScript 컴파일 시 타입 에러가 발생하지 않는지 확인"
          },
          {
            "id": 5,
            "title": "주석 처리된 통계 표시 코드 복원 및 스타일링",
            "description": "페이지에서 주석 처리된 통계 표시 영역을 복원하고 사용자 친화적인 UI로 개선",
            "dependencies": ["1.4"],
            "details": "+page.svelte에서 주석 처리된 통계 관련 코드를 복원하고, 전달받은 통계 데이터를 표시합니다. 태그 통계를 시각적으로 보기 좋게 표현하기 위해 적절한 스타일링을 적용하고, 반응형 디자인을 고려합니다.",
            "status": "done",
            "testStrategy": "태그 페이지에서 통계 정보가 올바르게 표시되고 UI가 사용자 친화적인지 확인"
          }
        ]
      },
      {
        "id": 2,
        "title": "window.openImageModal 타입 정의 추가",
        "description": "TypeScript에서 window.openImageModal 타입이 정의되지 않아 발생하는 타입 에러 해결",
        "details": "global.d.ts 파일을 생성하거나 수정하여 Window 인터페이스를 확장하고 openImageModal 함수의 타입을 정의. 함수 시그니처에 맞는 적절한 매개변수 및 반환 타입 지정.",
        "testStrategy": "TypeScript 빌드 시 에러가 발생하지 않는지 확인. 이미지 모달 기능이 정상적으로 작동하는지 테스트.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "현재 openImageModal 사용 현황 분석",
            "description": "프로젝트 전체에서 window.openImageModal이 사용되는 위치와 호출 방식을 파악하여 정확한 타입 정의를 위한 기반 자료 수집",
            "dependencies": [],
            "details": "grep 또는 검색 도구를 사용하여 openImageModal 함수가 사용되는 모든 파일을 찾고, 각 호출 위치에서의 매개변수와 반환값 사용 패턴을 분석. 함수의 정확한 시그니처를 파악하기 위해 실제 구현부도 확인.",
            "status": "pending",
            "testStrategy": "검색 결과를 통해 모든 사용 사례가 누락 없이 파악되었는지 확인"
          },
          {
            "id": 2,
            "title": "openImageModal 함수 시그니처 정의",
            "description": "분석된 사용 현황을 바탕으로 openImageModal 함수의 정확한 매개변수 타입과 반환 타입을 정의",
            "dependencies": ["2.1"],
            "details": "함수가 받는 매개변수(이미지 URL, 옵션 객체 등)의 타입과 반환값의 타입을 명확히 정의. 선택적 매개변수가 있는지 확인하고 적절한 인터페이스나 타입 별칭을 생성. 함수가 void를 반환하는지 또는 특정 값을 반환하는지 확인.",
            "status": "pending",
            "testStrategy": "정의된 타입이 실제 사용 패턴과 일치하는지 검증"
          },
          {
            "id": 3,
            "title": "global.d.ts 파일 생성 또는 수정",
            "description": "프로젝트 루트에 global.d.ts 파일을 생성하거나 기존 파일을 수정하여 Window 인터페이스 확장 준비",
            "dependencies": ["2.2"],
            "details": "src 폴더 또는 프로젝트 루트에 global.d.ts 파일이 있는지 확인하고, 없으면 새로 생성. 기존 파일이 있다면 Window 인터페이스 확장 부분을 추가할 위치를 확인. TypeScript 설정에서 해당 파일이 포함되도록 구성 확인.",
            "status": "pending",
            "testStrategy": "TypeScript 컴파일러가 global.d.ts 파일을 올바르게 인식하는지 확인"
          },
          {
            "id": 4,
            "title": "Window 인터페이스에 openImageModal 타입 추가",
            "description": "global.d.ts 파일에서 Window 인터페이스를 확장하여 openImageModal 메서드의 타입 정의를 추가",
            "dependencies": ["2.3"],
            "details": "declare global { interface Window { openImageModal: (매개변수 타입) => 반환 타입; } } 형태로 Window 인터페이스를 확장. 앞서 정의한 함수 시그니처를 정확히 반영하여 타입 안전성을 보장. JSDoc 주석을 추가하여 함수의 용도와 사용법을 문서화.",
            "status": "pending",
            "testStrategy": "IDE에서 window.openImageModal 타입 자동완성과 타입 체크가 정상 작동하는지 확인"
          },
          {
            "id": 5,
            "title": "타입 정의 검증 및 빌드 테스트",
            "description": "추가된 타입 정의가 모든 사용 사례에서 정상 작동하는지 검증하고 TypeScript 빌드가 성공하는지 확인",
            "dependencies": ["2.4"],
            "details": "pnpm check 명령어를 실행하여 TypeScript 타입 체크가 통과하는지 확인. pnpm build 명령어로 전체 빌드가 성공하는지 검증. 기존에 타입 에러가 발생했던 파일들에서 에러가 해결되었는지 확인. 실제 브라우저에서 이미지 모달 기능이 정상 작동하는지 테스트.",
            "status": "pending",
            "testStrategy": "TypeScript 빌드 성공, 타입 에러 해결, 이미지 모달 기능 정상 작동 확인"
          }
        ]
      },
      {
        "id": 3,
        "title": "About 페이지 테이블 반응형 문제 해결",
        "description": "모바일에서 About 페이지 테이블 컬럼 비율이 깨지고 가로 스크롤이 발생하는 문제 수정",
        "details": "테이블 CSS를 수정하여 모바일 환경에서 적절한 컬럼 비율을 적용하고 가로 스크롤을 방지. Tailwind CSS의 반응형 클래스를 활용하여 화면 크기별로 다른 레이아웃 적용.",
        "testStrategy": "다양한 화면 크기(모바일, 태블릿, 데스크톱)에서 테이블 레이아웃이 올바르게 표시되는지 확인. 가로 스크롤이 발생하지 않는지 검증.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "About 페이지 현재 테이블 구조 분석",
            "description": "About 페이지의 현재 테이블 구현을 분석하여 반응형 문제의 원인을 파악",
            "dependencies": [],
            "details": "src/routes/about/+page.svelte 파일을 분석하여 현재 테이블 구조, CSS 클래스, 컬럼 비율 설정을 확인. 모바일에서 가로 스크롤이 발생하는 구체적인 원인과 컬럼 비율 문제를 식별. 기존 Tailwind CSS 클래스 사용 현황을 파악하고 개선 방향을 수립.",
            "status": "pending",
            "testStrategy": "Chrome 개발자 도구의 모바일 시뮬레이션을 통해 현재 문제 상황을 재현하고 문서화"
          },
          {
            "id": 2,
            "title": "모바일 우선 반응형 테이블 CSS 설계",
            "description": "모바일 환경에서 최적화된 테이블 레이아웃을 설계하고 반응형 브레이크포인트 정의",
            "dependencies": ["3.1"],
            "details": "Tailwind CSS의 반응형 클래스(sm:, md:, lg:)를 활용하여 화면 크기별 테이블 레이아웃을 설계. 모바일에서는 세로 스택 레이아웃 또는 축약된 테이블 형태를 적용하고, 태블릿과 데스크톱에서는 적절한 컬럼 비율을 유지. table-auto 대신 table-fixed 사용을 고려하여 컬럼 너비를 제어.",
            "status": "pending",
            "testStrategy": "Figma 또는 종이 스케치를 통해 레이아웃 디자인을 시각화하고 검토"
          },
          {
            "id": 3,
            "title": "테이블 컴포넌트 반응형 CSS 적용",
            "description": "설계된 반응형 CSS 클래스를 테이블 컴포넌트에 실제 적용",
            "dependencies": ["3.2"],
            "details": "About 페이지의 테이블에 새로운 Tailwind CSS 반응형 클래스를 적용. 컬럼별로 적절한 너비 비율을 설정하고(예: w-1/4, w-3/4), 모바일에서는 block 또는 flex 레이아웃으로 변경. overflow-x-auto 제거하고 대신 적절한 줄바꿈과 텍스트 축약을 적용.",
            "status": "pending",
            "testStrategy": "로컬 개발 서버에서 실시간으로 CSS 변경사항을 확인하며 반복 개선"
          },
          {
            "id": 4,
            "title": "다양한 화면 크기에서 테스트 및 미세 조정",
            "description": "모든 디바이스 크기에서 테이블이 올바르게 표시되는지 확인하고 필요한 조정 수행",
            "dependencies": ["3.3"],
            "details": "Chrome 개발자 도구의 디바이스 시뮬레이션을 통해 iPhone, iPad, Android 다양한 해상도에서 테스트. 가로 스크롤 발생 여부, 텍스트 가독성, 컬럼 비율의 적절성을 확인. 필요시 추가적인 미디어 쿼리나 Tailwind 클래스를 적용하여 미세 조정.",
            "status": "pending",
            "testStrategy": "실제 모바일 디바이스에서도 테스트하여 시뮬레이션과의 차이점 확인"
          },
          {
            "id": 5,
            "title": "접근성 및 사용자 경험 최종 검증",
            "description": "테이블의 접근성을 확인하고 전체적인 사용자 경험을 검증",
            "dependencies": ["3.4"],
            "details": "스크린 리더 호환성, 키보드 네비게이션, 컬러 대비 등 웹 접근성 가이드라인 준수 여부를 확인. 테이블의 의미 구조가 올바르게 유지되는지 검증. 모든 반응형 변경사항이 다른 페이지에 영향을 주지 않는지 전체 사이트 회귀 테스트 수행.",
            "status": "pending",
            "testStrategy": "WAVE 또는 axe-core를 사용한 접근성 자동 검사 및 수동 키보드 네비게이션 테스트"
          }
        ]
      },
      {
        "id": 4,
        "title": "미사용 VirtualList 컴포넌트 제거",
        "description": "PostsList에서 사용하지 않는 VirtualList 컴포넌트 및 관련 코드 제거",
        "details": "VirtualList.svelte 컴포넌트 파일을 삭제하고, PostsList에서 VirtualList 관련 import 및 사용 코드를 제거. 관련 타입 정의도 함께 정리.",
        "testStrategy": "PostsList가 정상적으로 작동하는지 확인. 빌드 시 에러가 발생하지 않는지 검증. 포스트 목록 표시 기능이 영향받지 않는지 테스트.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "VirtualList 컴포넌트 사용 현황 분석",
            "description": "코드베이스에서 VirtualList 컴포넌트의 모든 사용처와 의존성을 파악하여 안전한 제거 계획 수립",
            "dependencies": [],
            "details": "src/lib/components/VirtualList.svelte 파일의 존재 여부 확인. PostsList.svelte에서 VirtualList import 및 사용 코드 위치 식별. 다른 컴포넌트에서의 VirtualList 사용 여부 검색. grep이나 IDE 검색 기능을 사용하여 'VirtualList' 키워드로 전체 프로젝트 검색.",
            "status": "pending",
            "testStrategy": "코드 검색 결과를 통해 모든 사용처가 정확히 파악되었는지 확인"
          },
          {
            "id": 2,
            "title": "PostsList에서 VirtualList import 제거",
            "description": "PostsList.svelte 파일에서 VirtualList 관련 import 문을 제거",
            "dependencies": ["4.1"],
            "details": "src/routes/+page.svelte 또는 PostsList 관련 파일에서 'import VirtualList from ...' 형태의 import 문을 찾아 제거. TypeScript 타입 import도 함께 확인하여 제거.",
            "status": "pending",
            "testStrategy": "import 제거 후 ESLint 오류가 발생하지 않는지 확인"
          },
          {
            "id": 3,
            "title": "PostsList에서 VirtualList 사용 코드 제거",
            "description": "PostsList 컴포넌트에서 VirtualList 태그 및 관련 props, 이벤트 핸들러 코드를 제거",
            "dependencies": ["4.2"],
            "details": "<VirtualList> 태그와 관련 속성들을 제거. VirtualList에 전달되던 props나 이벤트 핸들러 함수들을 정리. 대신 사용할 기본 HTML 구조나 다른 컴포넌트로 대체 확인.",
            "status": "pending",
            "testStrategy": "컴포넌트 마크업에서 VirtualList 관련 코드가 완전히 제거되었는지 확인"
          },
          {
            "id": 4,
            "title": "VirtualList 관련 타입 정의 제거",
            "description": "TypeScript 타입 정의 파일에서 VirtualList 관련 타입과 인터페이스를 제거",
            "dependencies": ["4.3"],
            "details": "app.d.ts, global.d.ts 또는 컴포넌트별 타입 파일에서 VirtualList 관련 타입 정의 검색. VirtualListProps, VirtualListItem 등의 타입 인터페이스 제거. 사용하지 않는 타입 import도 함께 정리.",
            "status": "pending",
            "testStrategy": "TypeScript 컴파일 시 VirtualList 관련 타입 오류가 발생하지 않는지 확인"
          },
          {
            "id": 5,
            "title": "VirtualList.svelte 파일 삭제 및 최종 검증",
            "description": "VirtualList.svelte 컴포넌트 파일을 삭제하고 전체 애플리케이션이 정상 작동하는지 검증",
            "dependencies": ["4.4"],
            "details": "src/lib/components/VirtualList.svelte 파일을 삭제. pnpm build 명령어로 빌드 성공 확인. pnpm lint 명령어로 코드 품질 검증. PostsList 페이지가 정상적으로 렌더링되는지 확인.",
            "status": "pending",
            "testStrategy": "파일 삭제 후 빌드 오류 없음을 확인하고, 포스트 목록 페이지가 정상 작동하는지 브라우저에서 테스트"
          }
        ]
      },
      {
        "id": 5,
        "title": "이미지 컴포넌트 최적화 및 통합",
        "description": "LazyImage와 Image 컴포넌트의 중복 기능을 통합하고 이미지 최적화 로직 개선",
        "details": "LazyImage와 Image 컴포넌트의 기능을 분석하여 하나의 최적화된 컴포넌트로 통합. 지연 로딩, 이미지 압축, WebP 지원 등의 최적화 기능을 구현하고 레이아웃 시프트를 방지.",
        "testStrategy": "이미지 로딩 성능이 개선되었는지 측정. 레이아웃 시프트(CLS) 지표 확인. 다양한 이미지 포맷과 크기로 테스트.",
        "priority": "medium",
        "dependencies": [4],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "기존 이미지 컴포넌트 분석 및 기능 목록 작성",
            "description": "LazyImage와 Image 컴포넌트의 현재 구현을 분석하여 각각의 기능과 중복되는 부분을 파악",
            "dependencies": [],
            "details": "src/lib/components/ 디렉토리에서 LazyImage.svelte와 Image.svelte 파일을 찾아 분석. 각 컴포넌트의 props, 이벤트 핸들러, 스타일링, 지연 로딩 로직을 문서화. 중복 기능과 고유 기능을 구분하여 통합 전략 수립.",
            "status": "pending",
            "testStrategy": "기존 컴포넌트들이 사용되는 모든 위치를 찾아 현재 동작 방식을 문서화"
          },
          {
            "id": 2,
            "title": "통합 이미지 컴포넌트 설계 및 인터페이스 정의",
            "description": "분석 결과를 바탕으로 통합된 이미지 컴포넌트의 props 인터페이스와 기능 명세를 설계",
            "dependencies": ["5.1"],
            "details": "TypeScript 인터페이스로 props 정의 (src, alt, lazy, width, height, format, quality 등). 지연 로딩 옵션, 이미지 최적화 설정, 에러 처리 방식을 포함한 컴포넌트 API 설계. WebP 지원 및 fallback 전략 수립.",
            "status": "pending",
            "testStrategy": "설계된 인터페이스가 기존 사용 사례를 모두 커버하는지 검증"
          },
          {
            "id": 3,
            "title": "OptimizedImage 컴포넌트 구현",
            "description": "설계된 명세에 따라 통합된 이미지 컴포넌트를 구현하고 지연 로딩 및 최적화 기능 개발",
            "dependencies": ["5.2"],
            "details": "src/lib/components/OptimizedImage.svelte 파일 생성. Intersection Observer API를 사용한 지연 로딩 구현. 이미지 포맷 감지 및 WebP 변환 로직 추가. 레이아웃 시프트 방지를 위한 placeholder 및 aspect ratio 처리. 이미지 로딩 상태 관리 (loading, loaded, error).",
            "status": "pending",
            "testStrategy": "다양한 이미지 포맷과 크기로 컴포넌트 테스트. 네트워크 속도 제한 환경에서 지연 로딩 동작 확인"
          },
          {
            "id": 4,
            "title": "기존 컴포넌트 사용처를 OptimizedImage로 마이그레이션",
            "description": "프로젝트 전체에서 LazyImage와 Image 컴포넌트를 사용하는 곳을 찾아 OptimizedImage로 교체",
            "dependencies": ["5.3"],
            "details": "grep 또는 IDE 검색으로 기존 컴포넌트 사용처 모두 찾기. 각 사용처에서 props 매핑 및 교체 작업 수행. 마이그레이션 과정에서 발생할 수 있는 UI 변경사항 최소화. 기존 스타일링 유지 확인.",
            "status": "pending",
            "testStrategy": "마이그레이션 전후 화면 비교 테스트. 모든 이미지가 정상적으로 표시되는지 확인"
          },
          {
            "id": 5,
            "title": "성능 측정 및 최적화, 기존 컴포넌트 제거",
            "description": "통합 완료 후 이미지 로딩 성능을 측정하고 최적화하며, 사용하지 않는 기존 컴포넌트들을 제거",
            "dependencies": ["5.4"],
            "details": "Lighthouse를 사용한 CLS(Cumulative Layout Shift) 지표 측정. 이미지 로딩 시간 및 메모리 사용량 비교 분석. 필요시 추가 최적화 적용 (이미지 압축, 캐싱 전략 등). LazyImage.svelte와 Image.svelte 파일 삭제 및 관련 import 정리.",
            "status": "pending",
            "testStrategy": "성능 지표가 기존 대비 개선되었는지 확인. 빌드 에러가 없고 모든 페이지가 정상 작동하는지 검증"
          }
        ]
      },
      {
        "id": 6,
        "title": "CacheManager 활용도 개선",
        "description": "기존 CacheManager를 주요 데이터 로딩 부분에 적용하여 성능 향상",
        "details": "포스트 목록, 태그 정보, 정적 콘텐츠 등 자주 접근하는 데이터에 CacheManager를 적용. 캐시 만료 시간을 적절히 설정하고 캐시 무효화 로직을 구현.",
        "testStrategy": "페이지 재방문 시 로딩 속도가 개선되었는지 확인. 캐시된 데이터와 실제 데이터의 일치성 검증. 메모리 사용량 모니터링.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "포스트 목록 데이터에 CacheManager 적용",
            "description": "메인 페이지와 카테고리 페이지의 포스트 목록 로딩에 CacheManager를 적용하여 성능 개선",
            "dependencies": [],
            "details": "src/routes/+page.server.ts와 관련 페이지 서버 파일에서 포스트 목록을 가져오는 함수에 CacheManager를 적용. 캐시 키는 'posts_list'와 같은 형태로 설정하고, 만료 시간은 30분으로 설정. 포스트 데이터 변경 시 캐시 무효화 로직도 함께 구현.",
            "status": "pending",
            "testStrategy": "페이지 초기 로딩 후 재방문 시 로딩 속도 개선 확인. 개발자 도구에서 네트워크 요청 감소 확인."
          },
          {
            "id": 2,
            "title": "태그 정보 캐싱 구현",
            "description": "태그 목록과 태그별 포스트 수 정보에 CacheManager를 적용하여 태그 관련 페이지 성능 향상",
            "dependencies": ["6.1"],
            "details": "src/lib/utils/posts.js의 태그 관련 함수들에 CacheManager를 적용. getAllTags, getTagCounts 등의 함수에서 'tags_data', 'tag_counts' 등의 캐시 키 사용. 태그 데이터는 변경 빈도가 낮으므로 캐시 만료 시간을 1시간으로 설정.",
            "status": "pending",
            "testStrategy": "태그 페이지와 개별 태그 페이지의 로딩 속도 측정. 태그 통계 계산 성능 개선 확인."
          },
          {
            "id": 3,
            "title": "정적 콘텐츠 캐싱 적용",
            "description": "사이트맵, RSS 피드, about 페이지 등 정적 콘텐츠에 CacheManager를 적용하여 서버 부하 감소",
            "dependencies": ["6.1"],
            "details": "src/routes/sitemap.xml/+server.ts, src/routes/rss.xml/+server.ts 등의 정적 콘텐츠 생성 파일에 CacheManager 적용. 캐시 키는 'sitemap', 'rss_feed' 등으로 설정하고, 만료 시간은 6시간으로 설정. about 페이지와 같은 정적 페이지도 캐싱 대상에 포함.",
            "status": "pending",
            "testStrategy": "정적 콘텐츠 요청 시 서버 응답 시간 개선 확인. 메모리 사용량 모니터링."
          },
          {
            "id": 4,
            "title": "캐시 만료 시간 최적화",
            "description": "각 데이터 유형별로 적절한 캐시 만료 시간을 설정하고 캐시 정책을 최적화",
            "dependencies": ["6.1", "6.2", "6.3"],
            "details": "데이터 변경 빈도와 중요도에 따라 캐시 만료 시간을 차별화. 포스트 목록: 30분, 태그 정보: 1시간, 정적 콘텐츠: 6시간으로 설정. CacheManager 설정 파일 또는 상수로 관리하여 유지보수성 향상. 메모리 사용량을 고려한 최대 캐시 항목 수 제한 설정.",
            "status": "pending",
            "testStrategy": "다양한 시나리오에서 캐시 적중률 측정. 메모리 사용량과 성능 개선 효과의 균형점 확인."
          },
          {
            "id": 5,
            "title": "캐시 무효화 로직 구현",
            "description": "콘텐츠 변경 시 관련 캐시를 자동으로 무효화하는 로직을 구현하여 데이터 일관성 보장",
            "dependencies": ["6.1", "6.2", "6.3", "6.4"],
            "details": "새 포스트 추가, 기존 포스트 수정, 태그 변경 등의 상황에서 관련 캐시를 무효화하는 함수 구현. 개발 모드에서는 파일 변경 감지 시 자동 캐시 무효화. 캐시 무효화 이벤트 로깅으로 디버깅 지원. clearAllCache, clearCacheByPattern 등의 유틸리티 함수 제공.",
            "status": "pending",
            "testStrategy": "콘텐츠 변경 후 캐시된 데이터와 실제 데이터의 일치성 확인. 캐시 무효화 로직이 올바르게 작동하는지 테스트."
          }
        ]
      },
      {
        "id": 7,
        "title": "태그 페이지 통계 UI 복원 및 개선",
        "description": "주석 처리된 태그 통계 정보의 UI를 복원하고 사용자 친화적으로 디자인 개선",
        "details": "태그 통계 데이터를 시각적으로 표현할 수 있는 UI 컴포넌트 구현. 차트나 그래프를 활용하여 태그 사용 빈도를 직관적으로 표시. Tailwind CSS를 사용한 반응형 디자인 적용.",
        "testStrategy": "태그 통계 UI가 정확한 데이터를 표시하는지 확인. 다양한 화면 크기에서 UI가 올바르게 표시되는지 테스트.",
        "priority": "medium",
        "dependencies": [1],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "주석 처리된 태그 통계 코드 분석 및 현황 파악",
            "description": "현재 프로젝트에서 주석 처리된 태그 통계 관련 코드를 찾아 분석하고 복원 가능한 데이터 구조와 로직을 파악",
            "dependencies": [],
            "details": "태그 페이지와 관련된 모든 파일을 검토하여 주석 처리된 통계 코드를 식별. 기존 태그 데이터 구조 분석 및 통계 생성에 필요한 데이터 소스 확인. 복원할 수 있는 기능 범위와 우선순위를 정의하고 문서화.",
            "status": "pending",
            "testStrategy": "기존 태그 데이터가 올바르게 수집되고 있는지 확인. 통계 계산에 필요한 모든 데이터가 접근 가능한지 검증."
          },
          {
            "id": 2,
            "title": "태그 통계 데이터 처리 로직 구현",
            "description": "태그별 사용 빈도, 게시물 수, 최근 사용일 등의 통계 데이터를 계산하는 로직 구현",
            "dependencies": ["7.1"],
            "details": "태그 통계 계산을 위한 유틸리티 함수 구현. 태그별 게시물 수 계산, 사용 빈도 분석, 최근 활동 날짜 추적 등의 기능 포함. 성능 최적화를 위한 메모이제이션 적용 및 실시간 데이터 업데이트 로직 구현.",
            "status": "pending",
            "testStrategy": "다양한 태그 데이터 세트로 통계 계산 정확성 검증. 대용량 데이터에서의 성능 테스트 및 메모리 사용량 모니터링."
          },
          {
            "id": 3,
            "title": "태그 통계 시각화 컴포넌트 설계 및 구현",
            "description": "차트나 그래프를 활용하여 태그 통계를 시각적으로 표현하는 Svelte 컴포넌트 구현",
            "dependencies": ["7.2"],
            "details": "바 차트, 도넛 차트, 워드 클라우드 등의 시각화 옵션을 제공하는 컴포넌트 구현. Chart.js나 D3.js 같은 차트 라이브러리 활용 또는 SVG 기반 커스텀 차트 구현. 인터랙티브 기능(호버, 클릭) 추가 및 애니메이션 효과 적용.",
            "status": "pending",
            "testStrategy": "다양한 데이터 크기와 형태로 차트 렌더링 테스트. 사용자 인터랙션 동작 확인 및 브라우저 호환성 검증."
          },
          {
            "id": 4,
            "title": "반응형 태그 통계 UI 레이아웃 구현",
            "description": "Tailwind CSS를 사용하여 모바일, 태블릿, 데스크톱 환경에서 최적화된 태그 통계 UI 레이아웃 구현",
            "dependencies": ["7.3"],
            "details": "Tailwind CSS 유틸리티 클래스를 활용한 반응형 그리드 레이아웃 구현. 모바일에서는 세로 스택, 데스크톱에서는 가로 배치 등 화면 크기별 최적화된 레이아웃 제공. 다크 모드 지원 및 접근성 가이드라인 준수.",
            "status": "pending",
            "testStrategy": "다양한 디바이스와 화면 크기에서 레이아웃 테스트. 접근성 도구를 사용한 WCAG 준수 확인 및 다크 모드 전환 테스트."
          },
          {
            "id": 5,
            "title": "태그 통계 페이지 통합 및 최종 검증",
            "description": "구현된 태그 통계 컴포넌트를 태그 페이지에 통합하고 전체 기능 테스트 및 성능 최적화",
            "dependencies": ["7.4"],
            "details": "태그 페이지에 통계 UI 컴포넌트 통합 및 기존 태그 목록과의 조화로운 배치. 로딩 상태 처리, 에러 핸들링, 데이터 캐싱 구현. 페이지 로딩 성능 최적화 및 SEO 메타데이터 업데이트.",
            "status": "pending",
            "testStrategy": "전체 태그 페이지 기능 통합 테스트. 로딩 성능 측정 및 사용자 경험 검증. 다양한 브라우저에서 크로스 브라우저 테스트 수행."
          }
        ]
      },
      {
        "id": 8,
        "title": "모바일 반응형 디자인 전반적 개선",
        "description": "전체 사이트의 모바일 레이아웃을 최적화하고 터치 인터페이스에 맞게 개선",
        "details": "모든 페이지와 컴포넌트의 모바일 반응형 디자인을 점검하고 개선. 터치 타겟 크기 조정, 스크롤 동작 최적화, 모바일 우선 디자인 원칙 적용.",
        "testStrategy": "다양한 모바일 기기에서 사용성 테스트 수행. 터치 인터페이스의 정확성과 반응성 확인.",
        "priority": "medium",
        "dependencies": [3],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "메인 페이지 및 홈 컴포넌트 모바일 최적화",
            "description": "홈페이지와 메인 컴포넌트들의 모바일 레이아웃을 개선하고 터치 인터페이스에 최적화",
            "dependencies": [],
            "details": "src/routes/+layout.svelte, src/routes/+page.svelte 파일의 모바일 반응형 스타일 개선. 네비게이션 메뉴를 햄버거 메뉴로 변경하고, 터치 타겟 크기를 최소 44px로 조정. 모바일에서 텍스트 가독성 향상을 위한 폰트 크기 및 줄 간격 조정.",
            "status": "pending",
            "testStrategy": "다양한 모바일 기기 화면 크기(320px~768px)에서 레이아웃 테스트. 터치 인터페이스 요소들의 반응성과 정확성 확인."
          },
          {
            "id": 2,
            "title": "블로그 포스트 상세 페이지 모바일 레이아웃 개선",
            "description": "개별 포스트 페이지의 모바일 읽기 경험을 최적화하고 코드 블록과 이미지의 반응형 처리 개선",
            "dependencies": ["8.1"],
            "details": "src/routes/posts/[slug]/+page.svelte와 관련 컴포넌트들의 모바일 스타일 개선. 코드 블록의 가로 스크롤 최적화, 이미지의 반응형 크기 조정, 텍스트 컨테이너의 패딩 및 마진 최적화. 목차(TOC) 컴포넌트의 모바일 접근성 개선.",
            "status": "pending",
            "testStrategy": "긴 포스트와 코드가 포함된 포스트에서 모바일 스크롤 및 읽기 경험 테스트. 이미지 확대/축소 기능의 터치 인터페이스 검증."
          },
          {
            "id": 3,
            "title": "태그 및 카테고리 페이지 모바일 인터페이스 최적화",
            "description": "태그 목록, 카테고리 페이지의 모바일 레이아웃과 터치 인터페이스를 개선",
            "dependencies": ["8.1"],
            "details": "src/routes/tags/+page.svelte와 태그 관련 컴포넌트들의 모바일 최적화. 태그 버튼들의 터치 타겟 크기 조정, 태그 클라우드의 모바일 레이아웃 개선, 필터링 인터페이스의 터치 친화적 변경. 스와이프 제스처를 활용한 태그 네비게이션 추가 고려.",
            "status": "pending",
            "testStrategy": "태그 선택 및 필터링 기능의 터치 인터페이스 정확성 테스트. 다양한 태그 수량에서의 레이아웃 안정성 확인."
          },
          {
            "id": 4,
            "title": "공통 컴포넌트 및 레이아웃 컴포넌트 모바일 반응형 개선",
            "description": "재사용되는 공통 컴포넌트들의 모바일 반응형 디자인을 일관성 있게 개선",
            "dependencies": ["8.2", "8.3"],
            "details": "src/lib/components/ 디렉토리의 모든 컴포넌트들을 점검하고 모바일 반응형 스타일 적용. Header, Footer, PostCard, ImageModal 등 공통 컴포넌트들의 터치 인터페이스 최적화. CSS Grid와 Flexbox를 활용한 일관된 반응형 레이아웃 구현.",
            "status": "pending",
            "testStrategy": "모든 공통 컴포넌트가 포함된 페이지에서 모바일 레이아웃 일관성 검증. 컴포넌트 재사용성과 반응형 동작 테스트."
          },
          {
            "id": 5,
            "title": "모바일 성능 최적화 및 터치 제스처 개선",
            "description": "모바일 기기에서의 로딩 성능을 최적화하고 터치 제스처 및 스크롤 동작을 개선",
            "dependencies": ["8.1", "8.2", "8.3", "8.4"],
            "details": "이미지 지연 로딩(lazy loading) 구현, 모바일에서 불필요한 애니메이션 비활성화, 터치 스크롤 부드러움 개선을 위한 CSS 속성 추가. viewport meta 태그 최적화, 모바일 브라우저의 줌 동작 제어. 스와이프 제스처를 활용한 네비게이션 기능 추가 검토.",
            "status": "pending",
            "testStrategy": "모바일 기기에서 페이지 로딩 속도 측정 및 최적화 효과 검증. 다양한 터치 제스처(스크롤, 핀치줌, 스와이프) 동작 테스트. 모바일 성능 지표(LCP, CLS, FID) 측정."
          }
        ]
      },
      {
        "id": 9,
        "title": "웹 접근성 향상",
        "description": "ARIA 레이블, 키보드 네비게이션 등 웹 접근성 기준에 맞게 개선",
        "details": "WCAG 2.1 가이드라인을 따라 ARIA 레이블 추가, 키보드 네비게이션 지원, 색상 대비 개선, 스크린 리더 호환성 확보. focus 관리 및 의미론적 HTML 구조 개선.",
        "testStrategy": "스크린 리더로 사이트 탐색 테스트. 키보드만으로 모든 기능 접근 가능한지 확인. 색상 대비 및 접근성 도구로 검증.",
        "priority": "medium",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ARIA 레이블 및 의미론적 HTML 구조 개선",
            "description": "모든 UI 컴포넌트에 적절한 ARIA 레이블을 추가하고 의미론적 HTML 태그로 구조를 개선",
            "dependencies": [],
            "details": "button, link, form 요소에 aria-label, aria-describedby 속성 추가. div 대신 semantic HTML 태그(nav, main, article, section, aside) 사용. 이미지에 alt 속성 추가. 폼 요소에 label과 연결. 헤딩 구조 검토 및 순서 개선.",
            "status": "pending",
            "testStrategy": "스크린 리더로 모든 페이지를 탐색하여 콘텐츠가 올바르게 읽히는지 확인. WAVE, axe-core 등의 접근성 도구로 검증."
          },
          {
            "id": 2,
            "title": "키보드 네비게이션 지원 구현",
            "description": "모든 인터랙티브 요소에 키보드로 접근 가능하도록 탭 순서 및 포커스 관리 구현",
            "dependencies": ["9.1"],
            "details": "tabindex 속성을 사용하여 적절한 탭 순서 설정. 모달, 드롭다운 등에서 포커스 트랩 구현. Enter, Space, Arrow 키로 요소 조작 가능하도록 키 이벤트 핸들러 추가. 포커스 표시 스타일 개선.",
            "status": "pending",
            "testStrategy": "키보드만으로 모든 기능을 사용할 수 있는지 테스트. Tab, Shift+Tab으로 순서대로 이동하는지 확인. 모달에서 Esc 키로 닫히는지 검증."
          },
          {
            "id": 3,
            "title": "색상 대비 및 시각적 접근성 개선",
            "description": "WCAG 2.1 AA 기준에 맞는 색상 대비비(4.5:1) 확보 및 색상에만 의존하지 않는 정보 전달 방식 구현",
            "dependencies": [],
            "details": "현재 색상 조합의 대비비 측정 및 개선. 링크, 버튼 등의 hover, focus 상태 색상 조정. 색상 외에도 아이콘, 패턴으로 정보 구분. 다크 모드에서도 적절한 대비비 유지.",
            "status": "pending",
            "testStrategy": "Colour Contrast Analyser로 모든 텍스트와 배경의 대비비 측정. 색맹 시뮬레이터로 색상 구분 가능성 확인."
          },
          {
            "id": 4,
            "title": "스크린 리더 호환성 최적화",
            "description": "스크린 리더가 콘텐츠를 정확하게 읽을 수 있도록 ARIA 속성 및 구조 최적화",
            "dependencies": ["9.1", "9.2"],
            "details": "동적 콘텐츠 변경 시 aria-live, aria-atomic 속성 사용. 복잡한 UI에 aria-expanded, aria-selected 등 상태 속성 추가. 테이블에 caption, scope 속성 추가. 랜드마크 역할(role) 정의.",
            "status": "pending",
            "testStrategy": "NVDA, JAWS, VoiceOver 등 주요 스크린 리더로 사이트 전체 탐색 테스트. 동적 변경사항이 올바르게 안내되는지 확인."
          },
          {
            "id": 5,
            "title": "접근성 테스트 자동화 및 문서화",
            "description": "접근성 테스트를 자동화하고 접근성 가이드라인 문서를 작성",
            "dependencies": ["9.1", "9.2", "9.3", "9.4"],
            "details": "jest-axe를 사용한 자동화된 접근성 테스트 추가. CI/CD 파이프라인에 접근성 검사 단계 포함. 접근성 가이드라인 및 체크리스트 문서 작성. 개발자용 접근성 테스트 도구 설정.",
            "status": "pending",
            "testStrategy": "자동화된 테스트가 CI에서 올바르게 실행되는지 확인. Lighthouse Accessibility 점수 90점 이상 달성 검증. 접근성 문서의 완성도 검토."
          }
        ]
      },
      {
        "id": 10,
        "title": "TypeScript 타입 안전성 강화",
        "description": "any 타입 사용을 줄이고 엄격한 타입 정의를 추가하여 타입 안전성 향상",
        "details": "프로젝트 전반의 any 타입을 구체적인 타입으로 교체. 인터페이스와 타입 정의를 강화하고 TypeScript strict 모드 활성화. 제네릭 타입 활용으로 재사용성 향상.",
        "testStrategy": "TypeScript strict 모드에서 빌드가 성공하는지 확인. 타입 에러가 런타임 에러를 사전에 방지하는지 검증.",
        "priority": "low",
        "dependencies": [2],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "프로젝트 전반 any 타입 사용 현황 분석",
            "description": "코드베이스에서 any 타입이 사용되는 모든 위치를 찾아 분석하고 구체적인 타입으로 교체할 계획 수립",
            "dependencies": [],
            "details": "grep 또는 IDE 검색을 통해 프로젝트 전체에서 ': any', 'as any', 'any[]' 등의 패턴을 검색. 각 사용처를 분석하여 적절한 타입 정의 방안을 문서화. src/lib, src/routes, src/app.d.ts 등 주요 디렉토리를 중점적으로 검토.",
            "status": "pending",
            "testStrategy": "분석 결과 문서 작성 및 타입 교체 우선순위 설정"
          },
          {
            "id": 2,
            "title": "TypeScript strict 모드 활성화 및 기본 설정 강화",
            "description": "tsconfig.json에서 strict 모드를 활성화하고 추가 타입 검사 옵션들을 설정",
            "dependencies": ["10.1"],
            "details": "tsconfig.json의 compilerOptions에서 strict: true 설정. noImplicitAny, strictNullChecks, strictFunctionTypes, noImplicitReturns, noFallthroughCasesInSwitch 등의 옵션을 true로 설정. 기존 코드에서 발생하는 타입 에러를 확인하고 수정 계획 수립.",
            "status": "pending",
            "testStrategy": "pnpm check 명령으로 TypeScript 컴파일 에러 확인 및 수정"
          },
          {
            "id": 3,
            "title": "공통 타입 및 인터페이스 정의 강화",
            "description": "프로젝트에서 자주 사용되는 데이터 구조들에 대한 명확한 타입 정의 추가",
            "dependencies": ["10.2"],
            "details": "src/lib/types/ 디렉토리 생성 후 Post, Tag, Metadata 등의 인터페이스를 정의. 블로그 포스트 관련 타입(PostMetadata, PostContent), 태그 관련 타입(TagInfo, TagStats), 컴포넌트 Props 타입들을 체계적으로 정의. app.d.ts에서 전역 타입 정의도 강화.",
            "status": "pending",
            "testStrategy": "정의된 타입들이 컴포넌트와 유틸리티에서 올바르게 사용되는지 확인"
          },
          {
            "id": 4,
            "title": "컴포넌트 Props 및 이벤트 타입 정의",
            "description": "Svelte 컴포넌트들의 Props와 이벤트 핸들러에 대한 정확한 타입 정의 추가",
            "dependencies": ["10.3"],
            "details": "src/lib/components/ 내의 모든 컴포넌트에서 export let 구문의 타입을 명시. createEventDispatcher 사용 시 이벤트 타입 정의. 컴포넌트 간 데이터 전달에서 any 타입 사용을 구체적인 인터페이스로 교체. PostCard, TagList, Pagination 등 주요 컴포넌트 우선 처리.",
            "status": "pending",
            "testStrategy": "컴포넌트 사용 시 타입 안전성 확인 및 자동완성 동작 검증"
          },
          {
            "id": 5,
            "title": "제네릭 타입 활용 및 유틸리티 함수 타입 강화",
            "description": "재사용 가능한 함수들에 제네릭 타입을 적용하고 유틸리티 함수들의 타입 안전성 개선",
            "dependencies": ["10.4"],
            "details": "src/lib/utils/ 내의 함수들에 제네릭 타입 적용. posts.js의 함수들을 TypeScript로 마이그레이션하여 posts.ts로 변경. 날짜 처리, 슬러그 생성, 태그 처리 등의 유틸리티 함수에 정확한 입력/출력 타입 정의. 함수 오버로딩이 필요한 경우 적절히 적용.",
            "status": "pending",
            "testStrategy": "유틸리티 함수들의 타입 추론이 정확한지 확인하고 빌드 에러 없이 동작하는지 검증"
          }
        ]
      },
      {
        "id": 11,
        "title": "미사용 코드 및 데드 코드 정리",
        "description": "주석 처리된 코드, 미사용 import, 데드 코드를 제거하여 코드베이스 정리",
        "details": "ESLint 규칙을 활용하여 미사용 변수, import, 함수 등을 찾아 제거. 주석 처리된 코드 중 불필요한 부분 삭제. 코드 중복 제거 및 리팩토링.",
        "testStrategy": "빌드 및 모든 기능 테스트가 통과하는지 확인. 번들 크기가 감소했는지 측정.",
        "priority": "low",
        "dependencies": [4, 5],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "ESLint 규칙 구성 및 미사용 코드 검사 설정",
            "description": "미사용 import, 변수, 함수 등을 탐지하는 ESLint 규칙을 구성하고 검사 스크립트 설정",
            "dependencies": [],
            "details": "ESLint 설정 파일(.eslintrc.js 또는 eslint.config.js)에 no-unused-vars, @typescript-eslint/no-unused-vars, no-unused-imports 등의 규칙을 활성화. 미사용 코드 검사를 위한 npm 스크립트 추가. TypeScript 및 Svelte 파일에 대한 적절한 파서 및 플러그인 설정 확인.",
            "status": "pending",
            "testStrategy": "ESLint 명령어 실행 시 미사용 코드가 올바르게 탐지되는지 확인. 의도적으로 미사용 변수를 생성하여 규칙이 작동하는지 테스트."
          },
          {
            "id": 2,
            "title": "미사용 import 및 변수 제거",
            "description": "ESLint로 탐지된 미사용 import문과 변수들을 전체 코드베이스에서 제거",
            "dependencies": ["11.1"],
            "details": "ESLint 결과를 바탕으로 src/ 디렉토리의 모든 .ts, .js, .svelte 파일에서 미사용 import 제거. 미사용 변수 및 함수 매개변수 제거. TypeScript 타입 import 중 사용하지 않는 것들 정리. 자동 수정 가능한 것은 eslint --fix 활용.",
            "status": "pending",
            "testStrategy": "빌드 및 타입 체크가 정상적으로 통과하는지 확인. 개발 서버 실행 시 에러가 발생하지 않는지 검증."
          },
          {
            "id": 3,
            "title": "주석 처리된 코드 검토 및 제거",
            "description": "코드베이스 전체에서 주석 처리된 코드를 검토하고 불필요한 부분 삭제",
            "dependencies": ["11.2"],
            "details": "전체 프로젝트에서 // 또는 /* */ 로 주석 처리된 코드 블록을 검색. Git 히스토리를 통해 해당 코드의 목적과 필요성 확인. 디버깅용 임시 코드, 구 버전 코드, 미완성 기능 등 불필요한 주석 코드 제거. 중요한 설명이나 TODO 주석은 유지.",
            "status": "pending",
            "testStrategy": "제거한 주석 코드와 관련된 기능이 여전히 정상 작동하는지 확인. 중요한 주석이 실수로 삭제되지 않았는지 검토."
          },
          {
            "id": 4,
            "title": "데드 코드 및 미사용 함수 제거",
            "description": "호출되지 않는 함수, 사용되지 않는 컴포넌트, 접근되지 않는 유틸리티 함수들을 식별하고 제거",
            "dependencies": ["11.2", "11.3"],
            "details": "코드 분석 도구나 IDE 기능을 활용하여 참조되지 않는 함수, 클래스, 컴포넌트 식별. src/lib/utils/, src/lib/components/ 등에서 사용하지 않는 파일 제거. 라우트에서 접근하지 않는 페이지 컴포넌트 확인. 타입 정의 중 사용하지 않는 interface, type 제거.",
            "status": "pending",
            "testStrategy": "애플리케이션의 모든 주요 기능과 라우트가 정상 작동하는지 테스트. 제거된 코드와 관련된 부분에서 에러가 발생하지 않는지 확인."
          },
          {
            "id": 5,
            "title": "코드 중복 제거 및 번들 크기 최적화",
            "description": "중복된 코드를 리팩토링하고 최종 번들 크기 감소 효과를 측정 및 검증",
            "dependencies": ["11.1", "11.2", "11.3", "11.4"],
            "details": "중복된 함수나 로직을 공통 유틸리티로 추출. 유사한 컴포넌트들을 통합하거나 공통 부모 컴포넌트 생성. 빌드 전후 번들 크기 비교 측정. package.json의 불필요한 dependencies 제거. tree-shaking이 제대로 작동하는지 확인.",
            "status": "pending",
            "testStrategy": "pnpm build 실행 후 번들 크기가 감소했는지 측정. 모든 페이지와 기능이 정상 작동하는지 전체 테스트. 성능 지표 개선 여부 확인."
          }
        ]
      },
      {
        "id": 12,
        "title": "에러 처리 및 사용자 경험 개선",
        "description": "비동기 작업의 에러 처리를 강화하고 사용자 친화적인 에러 메시지 제공",
        "details": "모든 비동기 함수에 적절한 try-catch 블록 추가. 네트워크 에러, 파일 로딩 실패 등의 상황에서 사용자에게 명확한 메시지 제공. 에러 바운더리 구현으로 앱 전체 크래시 방지.",
        "testStrategy": "의도적으로 에러 상황을 발생시켜 에러 처리가 올바르게 작동하는지 확인. 사용자에게 표시되는 에러 메시지의 적절성 검증.",
        "priority": "low",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "에러 타입 및 공통 에러 처리 유틸리티 정의",
            "description": "다양한 에러 타입을 정의하고 공통으로 사용할 에러 처리 유틸리티 함수들을 구현",
            "dependencies": [],
            "details": "src/lib/utils/errors.ts 파일을 생성하여 NetworkError, FileLoadError, ValidationError 등의 커스텀 에러 클래스를 정의. 에러 메시지를 사용자 친화적으로 변환하는 formatErrorMessage 함수와 에러 로깅을 위한 logError 함수 구현. 에러 심각도(severity) 레벨 정의.",
            "status": "pending",
            "testStrategy": "각 에러 타입의 인스턴스 생성 및 메시지 포맷팅이 올바르게 작동하는지 단위 테스트"
          },
          {
            "id": 2,
            "title": "글로벌 에러 바운더리 컴포넌트 구현",
            "description": "앱 전체의 예상치 못한 에러를 포착하고 사용자에게 적절한 폴백 UI를 제공하는 에러 바운더리 구현",
            "dependencies": ["12.1"],
            "details": "src/lib/components/ErrorBoundary.svelte 컴포넌트를 생성하여 앱 레벨의 에러를 포착. 에러 발생 시 사용자에게 친화적인 메시지와 새로고침 버튼을 제공하는 폴백 UI 구현. app.html에서 전체 앱을 감싸도록 설정. 개발 환경에서는 상세한 에러 정보 표시, 프로덕션에서는 간소화된 메시지 표시.",
            "status": "pending",
            "testStrategy": "의도적으로 컴포넌트에서 에러를 발생시켜 에러 바운더리가 활성화되고 폴백 UI가 표시되는지 확인"
          },
          {
            "id": 3,
            "title": "비동기 함수 에러 처리 강화",
            "description": "모든 비동기 함수에 try-catch 블록을 추가하고 적절한 에러 처리 구현",
            "dependencies": ["12.1"],
            "details": "src/lib/utils/posts.ts의 getAllPosts, getPostBySlug 등 모든 비동기 함수에 try-catch 블록 추가. 네트워크 요청, 파일 로딩 실패 등의 상황에서 적절한 에러 처리 구현. 에러 발생 시 기본값 반환 또는 사용자에게 알림. +page.server.ts 파일들의 load 함수에도 에러 처리 적용.",
            "status": "pending",
            "testStrategy": "파일이 존재하지 않거나 네트워크가 불안정한 상황에서 앱이 크래시되지 않고 적절한 에러 처리가 되는지 테스트"
          },
          {
            "id": 4,
            "title": "토스트 알림 시스템 구현",
            "description": "에러 메시지와 성공 메시지를 사용자에게 표시하는 토스트 알림 시스템 구현",
            "dependencies": ["12.1"],
            "details": "src/lib/stores/toast.ts에 토스트 상태를 관리하는 Svelte 스토어 생성. src/lib/components/Toast.svelte 컴포넌트를 구현하여 에러, 성공, 정보, 경고 메시지를 다른 스타일로 표시. 자동 사라짐 기능과 수동 닫기 버튼 제공. 여러 토스트 메시지 동시 표시 지원.",
            "status": "pending",
            "testStrategy": "다양한 타입의 토스트 메시지가 올바른 스타일로 표시되고 자동으로 사라지는지 테스트"
          },
          {
            "id": 5,
            "title": "페이지별 에러 처리 통합 및 사용자 경험 개선",
            "description": "각 페이지와 컴포넌트에서 에러 처리를 통합하고 사용자 경험을 개선",
            "dependencies": ["12.2", "12.3", "12.4"],
            "details": "모든 +page.svelte 파일에서 에러 상태를 처리하는 로직 추가. 로딩 상태와 에러 상태를 구분하여 적절한 UI 표시. 404 에러, 네트워크 에러, 서버 에러 등 상황별로 다른 메시지와 액션 버튼 제공. 재시도 버튼, 홈으로 돌아가기 버튼 등 사용자가 취할 수 있는 액션 제공.",
            "status": "pending",
            "testStrategy": "각 페이지에서 다양한 에러 상황을 시뮬레이션하여 적절한 에러 UI가 표시되고 사용자 액션이 올바르게 작동하는지 확인"
          }
        ]
      },
      {
        "id": 13,
        "title": "포스트 검색 기능 구현",
        "description": "제목, 내용, 태그를 기반으로 한 포스트 검색 기능 추가",
        "details": "검색 UI 컴포넌트 구현 및 검색 알고리즘 개발. 인덱싱을 통한 검색 성능 최적화. 검색 결과 하이라이팅 및 정렬 기능 제공. 검색 히스토리 및 자동완성 기능 추가.",
        "testStrategy": "다양한 검색어로 정확한 결과가 반환되는지 확인. 검색 성능 및 사용자 경험 테스트. 한글 검색 최적화 검증.",
        "priority": "low",
        "dependencies": [6, 10],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "검색 인덱스 생성 및 데이터 구조 설계",
            "description": "포스트 검색을 위한 효율적인 인덱스 구조를 설계하고 구현",
            "dependencies": [],
            "details": "포스트의 제목, 내용, 태그를 파싱하여 검색 가능한 형태로 변환하는 인덱스 생성 함수를 구현합니다. 한글 형태소 분석을 고려한 키워드 추출 로직을 포함하고, 검색 성능 최적화를 위해 역인덱스(inverted index) 구조를 활용합니다. src/lib/utils/search.js 파일에 인덱스 생성 및 관리 함수들을 구현합니다.",
            "status": "pending",
            "testStrategy": "다양한 포스트 데이터로 인덱스가 올바르게 생성되는지 확인하고, 검색 키워드 추출 로직의 정확성을 테스트합니다."
          },
          {
            "id": 2,
            "title": "검색 알고리즘 구현",
            "description": "검색 쿼리를 처리하고 관련성 높은 결과를 반환하는 검색 알고리즘 개발",
            "dependencies": ["13.1"],
            "details": "생성된 인덱스를 활용하여 검색 쿼리를 처리하는 알고리즘을 구현합니다. TF-IDF 점수 기반의 관련성 계산, 부분 문자열 매칭, 퍼지 매칭을 지원하며, 검색 결과를 관련성 순으로 정렬합니다. 한글 검색 최적화를 위해 초성 검색, 자모 분리 검색도 지원합니다.",
            "status": "pending",
            "testStrategy": "다양한 검색어(완전 일치, 부분 일치, 초성 검색 등)로 정확한 결과가 반환되는지 확인하고, 검색 성능을 측정합니다."
          },
          {
            "id": 3,
            "title": "검색 UI 컴포넌트 구현",
            "description": "사용자가 사용하기 쉬운 검색 인터페이스 컴포넌트 개발",
            "dependencies": [],
            "details": "검색 입력 필드, 검색 버튼, 검색 결과 표시 영역을 포함한 SearchComponent.svelte를 구현합니다. 실시간 검색 제안, 검색어 자동완성, 검색 히스토리 표시 기능을 포함하며, 반응형 디자인으로 모바일 환경에서도 사용하기 편리하도록 구현합니다.",
            "status": "pending",
            "testStrategy": "다양한 디바이스와 브라우저에서 검색 UI가 올바르게 표시되고 작동하는지 확인합니다."
          },
          {
            "id": 4,
            "title": "검색 결과 페이지 및 하이라이팅 구현",
            "description": "검색 결과를 표시하고 검색어를 하이라이팅하는 기능 구현",
            "dependencies": ["13.2", "13.3"],
            "details": "검색 결과를 표시하는 /search 라우트와 SearchResults.svelte 컴포넌트를 구현합니다. 검색어 하이라이팅, 결과 페이지네이션, 필터링 옵션(태그별, 날짜별)을 제공하며, 검색 결과가 없을 때의 안내 메시지도 포함합니다. 검색 결과에서 포스트 미리보기와 매칭된 부분의 스니펫을 표시합니다.",
            "status": "pending",
            "testStrategy": "검색 결과가 올바르게 표시되고 하이라이팅이 정확히 적용되는지 확인하며, 빈 결과에 대한 처리도 테스트합니다."
          },
          {
            "id": 5,
            "title": "검색 기능 통합 및 최적화",
            "description": "전체 검색 시스템을 통합하고 성능 최적화 적용",
            "dependencies": ["13.1", "13.2", "13.3", "13.4"],
            "details": "모든 검색 컴포넌트를 메인 레이아웃에 통합하고, 검색 인덱스를 빌드 타임에 생성하여 정적 파일로 저장합니다. 검색 성능 최적화를 위해 디바운싱, 캐싱, 레이지 로딩을 적용하며, SEO를 위한 검색 결과 페이지의 메타 태그도 설정합니다. 검색 분석을 위한 이벤트 추적도 추가합니다.",
            "status": "pending",
            "testStrategy": "전체 검색 플로우가 원활하게 작동하는지 확인하고, 검색 성능 및 사용자 경험을 종합적으로 테스트합니다."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-05T06:50:07.046Z",
      "updated": "2025-08-05T07:37:40.520Z",
      "description": "Tasks for improvements context"
    }
  }
}

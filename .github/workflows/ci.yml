name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 테스트 및 코드 품질 검사
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 의존성 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: TypeScript 타입 검사
        run: pnpm check

      - name: ESLint 및 Prettier 검사
        run: pnpm lint

      - name: 테스트 실행 및 커버리지 생성
        run: pnpm test:coverage

      - name: 커버리지 리포트 업로드
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: true
          verbose: true

      - name: 커버리지 임계값 검사
        run: |
          COVERAGE=$(pnpm test:coverage --reporter=json | jq '.coverageMap | .[] | .statements.pct' | awk '{sum+=$1} END {print sum/NR}')
          echo "전체 커버리지: $COVERAGE%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ 커버리지가 70% 미만입니다 (현재: $COVERAGE%)"
            exit 1
          else
            echo "✅ 커버리지 임계값을 통과했습니다 (현재: $COVERAGE%)"
          fi

      - name: 빌드 테스트
        run: pnpm build

  comment-coverage:
    name: PR에 커버리지 결과 코멘트
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: pnpm 설정
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: 의존성 설치
        run: pnpm install --frozen-lockfile

      - name: 커버리지 생성
        run: pnpm test:coverage

      - name: PR에 커버리지 코멘트
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // 커버리지 요약 정보 읽기
            const coverageSummary = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverageSummary.total;
            
            const coverageComment = `
            ## 📊 테스트 커버리지 리포트
            
            | 항목 | 커버리지 | 임계값 | 상태 |
            |------|----------|--------|------|
            | 📝 Statements | ${total.statements.pct}% | 70% | ${total.statements.pct >= 70 ? '✅' : '❌'} |
            | 🌿 Branches | ${total.branches.pct}% | 70% | ${total.branches.pct >= 70 ? '✅' : '❌'} |
            | 🔧 Functions | ${total.functions.pct}% | 70% | ${total.functions.pct >= 70 ? '✅' : '❌'} |
            | 📄 Lines | ${total.lines.pct}% | 70% | ${total.lines.pct >= 70 ? '✅' : '❌'} |
            
            **전체 커버리지:** ${total.statements.pct}%
            
            ${total.statements.pct >= 70 ? '🎉 모든 커버리지 임계값을 통과했습니다!' : '⚠️ 일부 커버리지가 임계값에 미달합니다.'}
            `;
            
            // 기존 커버리지 코멘트 찾기
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('📊 테스트 커버리지 리포트')
            );
            
            if (existingComment) {
              // 기존 코멘트 업데이트
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              // 새 코멘트 생성
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }
# .github/workflows/seo-post-deployment.yml
name: SEO Post-Deployment Validation

on:
  deployment_status:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

permissions:
  contents: read
  issues: write

jobs:
  run-reusable-seo-check:
    name: Run Reusable SEO Check
    uses: ./.github/workflows/reusable-seo-check.yml
    # Always run the reusable workflow for deployment events
    if: github.event_name == 'workflow_dispatch' || github.event.deployment_status.state == 'success'

  handle-results:
    name: Handle SEO Results
    needs: run-reusable-seo-check
    runs-on: ubuntu-latest
    if: always() && (github.event_name == 'workflow_dispatch' || github.event.deployment_status.state == 'success')

    steps:
      - name: Debug Workflow Context and Calculate Artifact Name
        id: debug-context
        run: |
          echo "=== POST-DEPLOYMENT WORKFLOW DEBUG ==="
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo ""
          echo "=== ARTIFACT NAME CALCULATION ==="
          # Calculate the same deterministic name as the reusable workflow
          EXPECTED_ARTIFACT_NAME="seo-reports-${{ github.sha }}-${{ github.run_number }}"
          echo "expected_artifact_name=$EXPECTED_ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "Calculated artifact name: $EXPECTED_ARTIFACT_NAME"
          echo ""
          echo "=== OUTPUT FROM REUSABLE WORKFLOW ==="
          echo "Reusable workflow output: '${{ needs.run-reusable-seo-check.outputs.artifact_name }}'"
          echo "Exit code from reusable workflow: '${{ needs.run-reusable-seo-check.outputs.exit_code }}'"
          echo "========================="

      - name: Download SEO Reports with Fallback Strategy
        id: download-reports
        run: |
          echo "=== ARTIFACT DOWNLOAD WITH FALLBACKS ==="

          # Primary: Try the deterministic name
          DETERMINISTIC_NAME="seo-reports-${{ github.sha }}-${{ github.run_number }}"
          echo "Attempting download with deterministic name: $DETERMINISTIC_NAME"

          if gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name=="'$DETERMINISTIC_NAME'") | .name' | grep -q "$DETERMINISTIC_NAME"; then
            echo "✓ Found artifact with deterministic name"
            echo "artifact_name=$DETERMINISTIC_NAME" >> $GITHUB_OUTPUT
          else
            echo "⚠ Deterministic name not found, trying reusable workflow output"
            REUSABLE_OUTPUT="${{ needs.run-reusable-seo-check.outputs.artifact_name }}"
            if [ -n "$REUSABLE_OUTPUT" ] && gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name=="'$REUSABLE_OUTPUT'") | .name' | grep -q "$REUSABLE_OUTPUT"; then
              echo "✓ Found artifact with reusable workflow output name"
              echo "artifact_name=$REUSABLE_OUTPUT" >> $GITHUB_OUTPUT
            else
              echo "⚠ Trying legacy pattern: seo-reports-${{ github.run_id }}"
              LEGACY_NAME="seo-reports-${{ github.run_id }}"
              if gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | select(.name=="'$LEGACY_NAME'") | .name' | grep -q "$LEGACY_NAME"; then
                echo "✓ Found artifact with legacy name"
                echo "artifact_name=$LEGACY_NAME" >> $GITHUB_OUTPUT
              else
                echo "❌ No artifacts found with any expected pattern"
                echo "Available artifacts:"
                gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts | jq -r '.artifacts[] | .name'
                echo "artifact_name=NOT_FOUND" >> $GITHUB_OUTPUT
              fi
            fi
          fi
          echo "========================="
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attempt Artifact Download
        if: steps.download-reports.outputs.artifact_name != 'NOT_FOUND'
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.download-reports.outputs.artifact_name }}
          path: .seo-reports

      - name: Handle Missing Artifacts
        if: steps.download-reports.outputs.artifact_name == 'NOT_FOUND'
        run: |
          echo "=== HANDLING MISSING ARTIFACTS ==="
          echo "❌ No SEO report artifacts were found"
          echo "Creating placeholder directory for graceful handling"
          mkdir -p .seo-reports
          echo "No SEO reports available - artifact download failed" > .seo-reports/download-failed.txt
          echo "This indicates an issue with the SEO validation or artifact upload process" >> .seo-reports/download-failed.txt
          echo "Run ID: ${{ github.run_id }}" >> .seo-reports/download-failed.txt
          echo "Timestamp: $(date)" >> .seo-reports/download-failed.txt
          echo "========================="

      - name: Checkout Repository (for scripts)
        uses: actions/checkout@v4.2.2

      - name: Create Issue on SEO Failure
        if: needs.run-reusable-seo-check.outputs.exit_code != '0'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const script = require('./.github/scripts/create-seo-issue.js');
            await script({github, context});
        env:
          ENVIRONMENT_INPUT: ${{ github.event.inputs.environment }}

      - name: Close SEO Issue on Success
        if: needs.run-reusable-seo-check.outputs.exit_code == '0'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const script = require('./.github/scripts/close-seo-issue.js');
            await script({github, context});

      - name: Post Success Summary
        if: needs.run-reusable-seo-check.outputs.exit_code == '0'
        run: |
          echo "## ✅ Post-Deployment SEO Validation Passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All SEO validations passed after deployment. The site is SEO-compliant!" >> $GITHUB_STEP_SUMMARY

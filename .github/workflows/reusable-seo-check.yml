# .github/workflows/reusable-seo-check.yml
name: Reusable SEO Check

on:
  workflow_call:
    outputs:
      exit_code:
        description: 'The exit code of the SEO validation script.'
        value: ${{ jobs.check.outputs.exit_code }}
      artifact_name:
        description: 'The name of the uploaded artifact containing SEO reports.'
        value: ${{ jobs.check.outputs.artifact_name }}

jobs:
  check:
    name: Run SEO Check
    runs-on: ubuntu-latest
    outputs:
      exit_code: ${{ steps.seo-validation.outputs.exit_code }}
      artifact_name: ${{ steps.set-artifact-name.outputs.artifact_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Build Output
        uses: actions/cache@v4
        with:
          path: |
            .svelte-kit
            build
          key: build-${{ runner.os }}-${{ hashFiles('src/**/*', 'posts/**/*', 'static/**/*', 'package.json', 'svelte.config.js', 'vite.config.js', 'tailwind.config.js') }}
          restore-keys: |
            build-${{ runner.os }}-

      - name: Build Project
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run SEO Validation
        id: seo-validation
        run: |
          set +e

          # Ensure .seo-reports directory exists
          mkdir -p .seo-reports

          # Run SEO validation
          pnpm seo:validate
          SEO_EXIT_CODE=$?
          echo "exit_code=$SEO_EXIT_CODE" >> $GITHUB_OUTPUT

          # Create a status file for debugging
          echo "SEO validation completed with exit code: $SEO_EXIT_CODE" > .seo-reports/validation-status.txt
          echo "Timestamp: $(date)" >> .seo-reports/validation-status.txt

          exit 0

      - name: Set Artifact Name and Debug Context
        id: set-artifact-name
        run: |
          # Use deterministic naming based on SHA and run number (not run_id which can conflict)
          ARTIFACT_NAME="seo-reports-${{ github.sha }}-${{ github.run_number }}"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

          # Comprehensive debugging
          echo "=== WORKFLOW CONTEXT DEBUG ==="
          echo "Repository: ${{ github.repository }}"
          echo "SHA: ${{ github.sha }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          echo "Run Attempt: ${{ github.run_attempt }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Job: ${{ github.job }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          echo "=== ARTIFACT NAMING DEBUG ==="
          echo "Deterministic artifact name: $ARTIFACT_NAME"
          echo "This name should be predictable by download workflows"
          echo "========================="

      - name: Check SEO Reports Directory and Ensure Files Exist
        run: |
          echo "=== SEO REPORTS DIRECTORY DEBUG ==="
          echo "Checking .seo-reports directory..."

          if [ -d ".seo-reports" ]; then
            echo "✓ Directory exists, listing contents:"
            ls -la .seo-reports/ || echo "Failed to list directory contents"
            
            # Count files in directory
            FILE_COUNT=$(find .seo-reports -type f | wc -l)
            echo "Found $FILE_COUNT files in .seo-reports directory"
            
            # Ensure there's at least one file to upload
            if [ "$FILE_COUNT" -eq 0 ]; then
              echo "⚠ Directory is empty, creating placeholder files"
              echo "SEO validation completed but no reports generated" > .seo-reports/no-reports.txt
              echo "Run ID: ${{ github.run_id }}" >> .seo-reports/run-info.txt
              echo "SHA: ${{ github.sha }}" >> .seo-reports/run-info.txt
              echo "Timestamp: $(date)" >> .seo-reports/run-info.txt
            else
              echo "✓ Directory has $FILE_COUNT files, ready for upload"
            fi
          else
            echo "❌ .seo-reports directory does not exist, creating with placeholder"
            mkdir -p .seo-reports
            echo "SEO validation failed - no directory created by validation script" > .seo-reports/validation-failed.txt
            echo "This indicates the SEO validation script failed before generating reports" >> .seo-reports/validation-failed.txt
            echo "Run ID: ${{ github.run_id }}" >> .seo-reports/validation-failed.txt
            echo "SHA: ${{ github.sha }}" >> .seo-reports/validation-failed.txt
            echo "Timestamp: $(date)" >> .seo-reports/validation-failed.txt
          fi

          # Final verification
          echo ""
          echo "=== FINAL ARTIFACT PREPARATION ==="
          echo "Final directory contents before upload:"
          ls -la .seo-reports/
          echo "Total files to upload: $(find .seo-reports -type f | wc -l)"
          echo "========================="

      - name: Upload SEO Reports with Debugging
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ steps.set-artifact-name.outputs.artifact_name }}
          path: .seo-reports/
          retention-days: 30
          if-no-files-found: error

      - name: Verify Upload Success
        if: always()
        run: |
          echo "=== UPLOAD VERIFICATION ==="
          echo "✓ Artifact upload step completed"
          echo "Artifact name used: ${{ steps.set-artifact-name.outputs.artifact_name }}"
          echo "Expected download name for consuming workflows: ${{ steps.set-artifact-name.outputs.artifact_name }}"
          echo ""
          echo "For manual debugging, the artifact should be visible in:"
          echo "  - GitHub Actions UI under Artifacts section"
          echo "  - Available for download by name: ${{ steps.set-artifact-name.outputs.artifact_name }}"
          echo "========================="
